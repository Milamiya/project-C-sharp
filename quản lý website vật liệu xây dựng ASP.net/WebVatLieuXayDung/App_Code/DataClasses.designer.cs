#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="BuildingMaterials")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAccountProduct(AccountProduct instance);
  partial void UpdateAccountProduct(AccountProduct instance);
  partial void DeleteAccountProduct(AccountProduct instance);
  partial void InsertSupplier(Supplier instance);
  partial void UpdateSupplier(Supplier instance);
  partial void DeleteSupplier(Supplier instance);
  partial void InsertAccounts1(Accounts1 instance);
  partial void UpdateAccounts1(Accounts1 instance);
  partial void DeleteAccounts1(Accounts1 instance);
  partial void InsertAccountsBank(AccountsBank instance);
  partial void UpdateAccountsBank(AccountsBank instance);
  partial void DeleteAccountsBank(AccountsBank instance);
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertCommentNew(CommentNew instance);
  partial void UpdateCommentNew(CommentNew instance);
  partial void DeleteCommentNew(CommentNew instance);
  partial void InsertComment(Comment instance);
  partial void UpdateComment(Comment instance);
  partial void DeleteComment(Comment instance);
  partial void InsertManage(Manage instance);
  partial void UpdateManage(Manage instance);
  partial void DeleteManage(Manage instance);
  partial void InsertNew(New instance);
  partial void UpdateNew(New instance);
  partial void DeleteNew(New instance);
  partial void InsertProductCategory(ProductCategory instance);
  partial void UpdateProductCategory(ProductCategory instance);
  partial void DeleteProductCategory(ProductCategory instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BuildingMaterialsConnectionString2"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<AccountProduct> AccountProducts
	{
		get
		{
			return this.GetTable<AccountProduct>();
		}
	}
	
	public System.Data.Linq.Table<Supplier> Suppliers
	{
		get
		{
			return this.GetTable<Supplier>();
		}
	}
	
	public System.Data.Linq.Table<Accounts1> Accounts1s
	{
		get
		{
			return this.GetTable<Accounts1>();
		}
	}
	
	public System.Data.Linq.Table<AccountsBank> AccountsBanks
	{
		get
		{
			return this.GetTable<AccountsBank>();
		}
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<CommentNew> CommentNews
	{
		get
		{
			return this.GetTable<CommentNew>();
		}
	}
	
	public System.Data.Linq.Table<Comment> Comments
	{
		get
		{
			return this.GetTable<Comment>();
		}
	}
	
	public System.Data.Linq.Table<Manage> Manages
	{
		get
		{
			return this.GetTable<Manage>();
		}
	}
	
	public System.Data.Linq.Table<New> News
	{
		get
		{
			return this.GetTable<New>();
		}
	}
	
	public System.Data.Linq.Table<ProductCategory> ProductCategories
	{
		get
		{
			return this.GetTable<ProductCategory>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
}

[Table(Name="dbo.AccountProduct")]
public partial class AccountProduct : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _AcountName;
	
	private long _ProductID;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<bool> _Status;
	
	private System.Nullable<int> _Number;
	
	private EntityRef<Accounts1> _Accounts1;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcountNameChanging(string value);
    partial void OnAcountNameChanged();
    partial void OnProductIDChanging(long value);
    partial void OnProductIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
	
	public AccountProduct()
	{
		this._Accounts1 = default(EntityRef<Accounts1>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[Column(Storage="_AcountName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string AcountName
	{
		get
		{
			return this._AcountName;
		}
		set
		{
			if ((this._AcountName != value))
			{
				if (this._Accounts1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAcountNameChanging(value);
				this.SendPropertyChanging();
				this._AcountName = value;
				this.SendPropertyChanged("AcountName");
				this.OnAcountNameChanged();
			}
		}
	}
	
	[Column(Storage="_ProductID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Bit")]
	public System.Nullable<bool> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="Int")]
	public System.Nullable<int> Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Association(Name="Accounts1_AccountProduct", Storage="_Accounts1", ThisKey="AcountName", IsForeignKey=true)]
	public Accounts1 Accounts1
	{
		get
		{
			return this._Accounts1.Entity;
		}
		set
		{
			Accounts1 previousValue = this._Accounts1.Entity;
			if (((previousValue != value) 
						|| (this._Accounts1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Accounts1.Entity = null;
					previousValue.AccountProducts.Remove(this);
				}
				this._Accounts1.Entity = value;
				if ((value != null))
				{
					value.AccountProducts.Add(this);
					this._AcountName = value.AcountName;
				}
				else
				{
					this._AcountName = default(string);
				}
				this.SendPropertyChanged("Accounts1");
			}
		}
	}
	
	[Association(Name="Product_AccountProduct", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.AccountProducts.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.AccountProducts.Add(this);
					this._ProductID = value.ProductID;
				}
				else
				{
					this._ProductID = default(long);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Suppliers")]
public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SuppliersID;
	
	private string _suppliersName;
	
	private string _HomeTown;
	
	private string _PhoneNumber;
	
	private string _Note;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppliersIDChanging(int value);
    partial void OnSuppliersIDChanged();
    partial void OnsuppliersNameChanging(string value);
    partial void OnsuppliersNameChanged();
    partial void OnHomeTownChanging(string value);
    partial void OnHomeTownChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Supplier()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[Column(Storage="_SuppliersID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SuppliersID
	{
		get
		{
			return this._SuppliersID;
		}
		set
		{
			if ((this._SuppliersID != value))
			{
				this.OnSuppliersIDChanging(value);
				this.SendPropertyChanging();
				this._SuppliersID = value;
				this.SendPropertyChanged("SuppliersID");
				this.OnSuppliersIDChanged();
			}
		}
	}
	
	[Column(Storage="_suppliersName", DbType="NVarChar(50)")]
	public string suppliersName
	{
		get
		{
			return this._suppliersName;
		}
		set
		{
			if ((this._suppliersName != value))
			{
				this.OnsuppliersNameChanging(value);
				this.SendPropertyChanging();
				this._suppliersName = value;
				this.SendPropertyChanged("suppliersName");
				this.OnsuppliersNameChanged();
			}
		}
	}
	
	[Column(Storage="_HomeTown", DbType="NVarChar(50)")]
	public string HomeTown
	{
		get
		{
			return this._HomeTown;
		}
		set
		{
			if ((this._HomeTown != value))
			{
				this.OnHomeTownChanging(value);
				this.SendPropertyChanging();
				this._HomeTown = value;
				this.SendPropertyChanged("HomeTown");
				this.OnHomeTownChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneNumber", DbType="VarChar(20)")]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(50)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Supplier_Product", Storage="_Products", OtherKey="SuppliersID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Supplier = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Supplier = null;
	}
}

[Table(Name="dbo.Accounts1")]
public partial class Accounts1 : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _AcountName;
	
	private string _Pass;
	
	private string _Gender;
	
	private System.Nullable<System.DateTime> _BirthDay;
	
	private string _HomeTown;
	
	private string _Email;
	
	private string _Note;
	
	private EntitySet<AccountProduct> _AccountProducts;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcountNameChanging(string value);
    partial void OnAcountNameChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnHomeTownChanging(string value);
    partial void OnHomeTownChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Accounts1()
	{
		this._AccountProducts = new EntitySet<AccountProduct>(new Action<AccountProduct>(this.attach_AccountProducts), new Action<AccountProduct>(this.detach_AccountProducts));
		OnCreated();
	}
	
	[Column(Storage="_AcountName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string AcountName
	{
		get
		{
			return this._AcountName;
		}
		set
		{
			if ((this._AcountName != value))
			{
				this.OnAcountNameChanging(value);
				this.SendPropertyChanging();
				this._AcountName = value;
				this.SendPropertyChanged("AcountName");
				this.OnAcountNameChanged();
			}
		}
	}
	
	[Column(Storage="_Pass", DbType="VarChar(30)")]
	public string Pass
	{
		get
		{
			return this._Pass;
		}
		set
		{
			if ((this._Pass != value))
			{
				this.OnPassChanging(value);
				this.SendPropertyChanging();
				this._Pass = value;
				this.SendPropertyChanged("Pass");
				this.OnPassChanged();
			}
		}
	}
	
	[Column(Storage="_Gender", DbType="NVarChar(5)")]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[Column(Storage="_BirthDay", DbType="DateTime")]
	public System.Nullable<System.DateTime> BirthDay
	{
		get
		{
			return this._BirthDay;
		}
		set
		{
			if ((this._BirthDay != value))
			{
				this.OnBirthDayChanging(value);
				this.SendPropertyChanging();
				this._BirthDay = value;
				this.SendPropertyChanged("BirthDay");
				this.OnBirthDayChanged();
			}
		}
	}
	
	[Column(Storage="_HomeTown", DbType="NVarChar(50)")]
	public string HomeTown
	{
		get
		{
			return this._HomeTown;
		}
		set
		{
			if ((this._HomeTown != value))
			{
				this.OnHomeTownChanging(value);
				this.SendPropertyChanging();
				this._HomeTown = value;
				this.SendPropertyChanged("HomeTown");
				this.OnHomeTownChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(100)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Accounts1_AccountProduct", Storage="_AccountProducts", OtherKey="AcountName")]
	public EntitySet<AccountProduct> AccountProducts
	{
		get
		{
			return this._AccountProducts;
		}
		set
		{
			this._AccountProducts.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AccountProducts(AccountProduct entity)
	{
		this.SendPropertyChanging();
		entity.Accounts1 = this;
	}
	
	private void detach_AccountProducts(AccountProduct entity)
	{
		this.SendPropertyChanging();
		entity.Accounts1 = null;
	}
}

[Table(Name="dbo.AccountsBank")]
public partial class AccountsBank : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _AccountBankID;
	
	private string _AccountName;
	
	private string _Money;
	
	private string _FullName;
	
	private string _HomeTown;
	
	private string _Email;
	
	private string _Note;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountBankIDChanging(string value);
    partial void OnAccountBankIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnMoneyChanging(string value);
    partial void OnMoneyChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnHomeTownChanging(string value);
    partial void OnHomeTownChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public AccountsBank()
	{
		OnCreated();
	}
	
	[Column(Storage="_AccountBankID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string AccountBankID
	{
		get
		{
			return this._AccountBankID;
		}
		set
		{
			if ((this._AccountBankID != value))
			{
				this.OnAccountBankIDChanging(value);
				this.SendPropertyChanging();
				this._AccountBankID = value;
				this.SendPropertyChanged("AccountBankID");
				this.OnAccountBankIDChanged();
			}
		}
	}
	
	[Column(Storage="_AccountName", DbType="NVarChar(50)")]
	public string AccountName
	{
		get
		{
			return this._AccountName;
		}
		set
		{
			if ((this._AccountName != value))
			{
				this.OnAccountNameChanging(value);
				this.SendPropertyChanging();
				this._AccountName = value;
				this.SendPropertyChanged("AccountName");
				this.OnAccountNameChanged();
			}
		}
	}
	
	[Column(Storage="_Money", DbType="VarChar(30)")]
	public string Money
	{
		get
		{
			return this._Money;
		}
		set
		{
			if ((this._Money != value))
			{
				this.OnMoneyChanging(value);
				this.SendPropertyChanging();
				this._Money = value;
				this.SendPropertyChanged("Money");
				this.OnMoneyChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(50)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_HomeTown", DbType="NVarChar(100)")]
	public string HomeTown
	{
		get
		{
			return this._HomeTown;
		}
		set
		{
			if ((this._HomeTown != value))
			{
				this.OnHomeTownChanging(value);
				this.SendPropertyChanging();
				this._HomeTown = value;
				this.SendPropertyChanged("HomeTown");
				this.OnHomeTownChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(100)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Categories")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CategoryID;
	
	private string _CategoryName;
	
	private string _Description;
	
	private EntitySet<ProductCategory> _ProductCategories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Category()
	{
		this._ProductCategories = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategories), new Action<ProductCategory>(this.detach_ProductCategories));
		OnCreated();
	}
	
	[Column(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[Column(Storage="_CategoryName", DbType="NVarChar(200)")]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(200)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Category_ProductCategory", Storage="_ProductCategories", OtherKey="CategoryID")]
	public EntitySet<ProductCategory> ProductCategories
	{
		get
		{
			return this._ProductCategories;
		}
		set
		{
			this._ProductCategories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ProductCategories(ProductCategory entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_ProductCategories(ProductCategory entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[Table(Name="dbo.CommentNew")]
public partial class CommentNew : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _CommenNewID;
	
	private System.Nullable<long> _NewID;
	
	private string _Title;
	
	private string _Detail;
	
	private string _Note;
	
	private EntityRef<New> _New;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommenNewIDChanging(long value);
    partial void OnCommenNewIDChanged();
    partial void OnNewIDChanging(System.Nullable<long> value);
    partial void OnNewIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public CommentNew()
	{
		this._New = default(EntityRef<New>);
		OnCreated();
	}
	
	[Column(Storage="_CommenNewID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long CommenNewID
	{
		get
		{
			return this._CommenNewID;
		}
		set
		{
			if ((this._CommenNewID != value))
			{
				this.OnCommenNewIDChanging(value);
				this.SendPropertyChanging();
				this._CommenNewID = value;
				this.SendPropertyChanged("CommenNewID");
				this.OnCommenNewIDChanged();
			}
		}
	}
	
	[Column(Storage="_NewID", DbType="BigInt")]
	public System.Nullable<long> NewID
	{
		get
		{
			return this._NewID;
		}
		set
		{
			if ((this._NewID != value))
			{
				if (this._New.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNewIDChanging(value);
				this.SendPropertyChanging();
				this._NewID = value;
				this.SendPropertyChanged("NewID");
				this.OnNewIDChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(50)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Detail", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Detail
	{
		get
		{
			return this._Detail;
		}
		set
		{
			if ((this._Detail != value))
			{
				this.OnDetailChanging(value);
				this.SendPropertyChanging();
				this._Detail = value;
				this.SendPropertyChanged("Detail");
				this.OnDetailChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(50)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="New_CommentNew", Storage="_New", ThisKey="NewID", IsForeignKey=true)]
	public New New
	{
		get
		{
			return this._New.Entity;
		}
		set
		{
			New previousValue = this._New.Entity;
			if (((previousValue != value) 
						|| (this._New.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._New.Entity = null;
					previousValue.CommentNews.Remove(this);
				}
				this._New.Entity = value;
				if ((value != null))
				{
					value.CommentNews.Add(this);
					this._NewID = value.NewID;
				}
				else
				{
					this._NewID = default(Nullable<long>);
				}
				this.SendPropertyChanged("New");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Comments")]
public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CommenID;
	
	private System.Nullable<long> _ProductID;
	
	private string _Title;
	
	private string _Detail;
	
	private string _Note;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommenIDChanging(int value);
    partial void OnCommenIDChanged();
    partial void OnProductIDChanging(System.Nullable<long> value);
    partial void OnProductIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Comment()
	{
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[Column(Storage="_CommenID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CommenID
	{
		get
		{
			return this._CommenID;
		}
		set
		{
			if ((this._CommenID != value))
			{
				this.OnCommenIDChanging(value);
				this.SendPropertyChanging();
				this._CommenID = value;
				this.SendPropertyChanged("CommenID");
				this.OnCommenIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductID", DbType="BigInt")]
	public System.Nullable<long> ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(100)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Detail", DbType="NVarChar(100)")]
	public string Detail
	{
		get
		{
			return this._Detail;
		}
		set
		{
			if ((this._Detail != value))
			{
				this.OnDetailChanging(value);
				this.SendPropertyChanging();
				this._Detail = value;
				this.SendPropertyChanged("Detail");
				this.OnDetailChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(100)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Product_Comment", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.Comments.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.Comments.Add(this);
					this._ProductID = value.ProductID;
				}
				else
				{
					this._ProductID = default(Nullable<long>);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Manages")]
public partial class Manage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _AccountID;
	
	private string _AccountPass;
	
	private string _Email;
	
	private string _FullName;
	
	private string _Powers;
	
	private System.Nullable<System.DateTime> _BirthDay;
	
	private string _Gender;
	
	private string _PhoneNumber;
	
	private string _Address;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(string value);
    partial void OnAccountIDChanged();
    partial void OnAccountPassChanging(string value);
    partial void OnAccountPassChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPowersChanging(string value);
    partial void OnPowersChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
	
	public Manage()
	{
		OnCreated();
	}
	
	[Column(Storage="_AccountID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string AccountID
	{
		get
		{
			return this._AccountID;
		}
		set
		{
			if ((this._AccountID != value))
			{
				this.OnAccountIDChanging(value);
				this.SendPropertyChanging();
				this._AccountID = value;
				this.SendPropertyChanged("AccountID");
				this.OnAccountIDChanged();
			}
		}
	}
	
	[Column(Storage="_AccountPass", DbType="VarChar(30)")]
	public string AccountPass
	{
		get
		{
			return this._AccountPass;
		}
		set
		{
			if ((this._AccountPass != value))
			{
				this.OnAccountPassChanging(value);
				this.SendPropertyChanging();
				this._AccountPass = value;
				this.SendPropertyChanged("AccountPass");
				this.OnAccountPassChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(50)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_Powers", DbType="NVarChar(50)")]
	public string Powers
	{
		get
		{
			return this._Powers;
		}
		set
		{
			if ((this._Powers != value))
			{
				this.OnPowersChanging(value);
				this.SendPropertyChanging();
				this._Powers = value;
				this.SendPropertyChanged("Powers");
				this.OnPowersChanged();
			}
		}
	}
	
	[Column(Storage="_BirthDay", DbType="DateTime")]
	public System.Nullable<System.DateTime> BirthDay
	{
		get
		{
			return this._BirthDay;
		}
		set
		{
			if ((this._BirthDay != value))
			{
				this.OnBirthDayChanging(value);
				this.SendPropertyChanging();
				this._BirthDay = value;
				this.SendPropertyChanged("BirthDay");
				this.OnBirthDayChanged();
			}
		}
	}
	
	[Column(Storage="_Gender", DbType="NVarChar(5)")]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneNumber", DbType="VarChar(20)")]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(100)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.News")]
public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _NewID;
	
	private string _NewCode;
	
	private string _Title;
	
	private string _SubTitle;
	
	private string _Detail;
	
	private string _Image;
	
	private string _KeyWord;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<int> _TotalView;
	
	private System.Nullable<bool> _IsPost;
	
	private System.Nullable<System.DateTime> _PostDate;
	
	private string _Author;
	
	private string _Account;
	
	private EntitySet<CommentNew> _CommentNews;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewIDChanging(long value);
    partial void OnNewIDChanged();
    partial void OnNewCodeChanging(string value);
    partial void OnNewCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubTitleChanging(string value);
    partial void OnSubTitleChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnKeyWordChanging(string value);
    partial void OnKeyWordChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnTotalViewChanging(System.Nullable<int> value);
    partial void OnTotalViewChanged();
    partial void OnIsPostChanging(System.Nullable<bool> value);
    partial void OnIsPostChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    #endregion
	
	public New()
	{
		this._CommentNews = new EntitySet<CommentNew>(new Action<CommentNew>(this.attach_CommentNews), new Action<CommentNew>(this.detach_CommentNews));
		OnCreated();
	}
	
	[Column(Storage="_NewID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long NewID
	{
		get
		{
			return this._NewID;
		}
		set
		{
			if ((this._NewID != value))
			{
				this.OnNewIDChanging(value);
				this.SendPropertyChanging();
				this._NewID = value;
				this.SendPropertyChanged("NewID");
				this.OnNewIDChanged();
			}
		}
	}
	
	[Column(Storage="_NewCode", DbType="VarChar(20)")]
	public string NewCode
	{
		get
		{
			return this._NewCode;
		}
		set
		{
			if ((this._NewCode != value))
			{
				this.OnNewCodeChanging(value);
				this.SendPropertyChanging();
				this._NewCode = value;
				this.SendPropertyChanged("NewCode");
				this.OnNewCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_SubTitle", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string SubTitle
	{
		get
		{
			return this._SubTitle;
		}
		set
		{
			if ((this._SubTitle != value))
			{
				this.OnSubTitleChanging(value);
				this.SendPropertyChanging();
				this._SubTitle = value;
				this.SendPropertyChanged("SubTitle");
				this.OnSubTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Detail", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Detail
	{
		get
		{
			return this._Detail;
		}
		set
		{
			if ((this._Detail != value))
			{
				this.OnDetailChanging(value);
				this.SendPropertyChanging();
				this._Detail = value;
				this.SendPropertyChanged("Detail");
				this.OnDetailChanged();
			}
		}
	}
	
	[Column(Storage="_Image", DbType="NVarChar(300)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[Column(Storage="_KeyWord", DbType="NVarChar(200)")]
	public string KeyWord
	{
		get
		{
			return this._KeyWord;
		}
		set
		{
			if ((this._KeyWord != value))
			{
				this.OnKeyWordChanging(value);
				this.SendPropertyChanging();
				this._KeyWord = value;
				this.SendPropertyChanged("KeyWord");
				this.OnKeyWordChanged();
			}
		}
	}
	
	[Column(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[Column(Storage="_TotalView", DbType="Int")]
	public System.Nullable<int> TotalView
	{
		get
		{
			return this._TotalView;
		}
		set
		{
			if ((this._TotalView != value))
			{
				this.OnTotalViewChanging(value);
				this.SendPropertyChanging();
				this._TotalView = value;
				this.SendPropertyChanged("TotalView");
				this.OnTotalViewChanged();
			}
		}
	}
	
	[Column(Storage="_IsPost", DbType="Bit")]
	public System.Nullable<bool> IsPost
	{
		get
		{
			return this._IsPost;
		}
		set
		{
			if ((this._IsPost != value))
			{
				this.OnIsPostChanging(value);
				this.SendPropertyChanging();
				this._IsPost = value;
				this.SendPropertyChanged("IsPost");
				this.OnIsPostChanged();
			}
		}
	}
	
	[Column(Storage="_PostDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> PostDate
	{
		get
		{
			return this._PostDate;
		}
		set
		{
			if ((this._PostDate != value))
			{
				this.OnPostDateChanging(value);
				this.SendPropertyChanging();
				this._PostDate = value;
				this.SendPropertyChanged("PostDate");
				this.OnPostDateChanged();
			}
		}
	}
	
	[Column(Storage="_Author", DbType="NVarChar(50)")]
	public string Author
	{
		get
		{
			return this._Author;
		}
		set
		{
			if ((this._Author != value))
			{
				this.OnAuthorChanging(value);
				this.SendPropertyChanging();
				this._Author = value;
				this.SendPropertyChanged("Author");
				this.OnAuthorChanged();
			}
		}
	}
	
	[Column(Storage="_Account", DbType="VarChar(30)")]
	public string Account
	{
		get
		{
			return this._Account;
		}
		set
		{
			if ((this._Account != value))
			{
				this.OnAccountChanging(value);
				this.SendPropertyChanging();
				this._Account = value;
				this.SendPropertyChanged("Account");
				this.OnAccountChanged();
			}
		}
	}
	
	[Association(Name="New_CommentNew", Storage="_CommentNews", OtherKey="NewID")]
	public EntitySet<CommentNew> CommentNews
	{
		get
		{
			return this._CommentNews;
		}
		set
		{
			this._CommentNews.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CommentNews(CommentNew entity)
	{
		this.SendPropertyChanging();
		entity.New = this;
	}
	
	private void detach_CommentNews(CommentNew entity)
	{
		this.SendPropertyChanging();
		entity.New = null;
	}
}

[Table(Name="dbo.ProductCategory")]
public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SmallProductCategoryID;
	
	private string _SmallProductCategoryCode;
	
	private string _SmallProductCategoryName;
	
	private System.Nullable<int> _CategoryID;
	
	private string _Description;
	
	private System.Nullable<bool> _IsDisplay;
	
	private string _Note;
	
	private EntitySet<Product> _Products;
	
	private EntityRef<Category> _Category;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSmallProductCategoryIDChanging(int value);
    partial void OnSmallProductCategoryIDChanged();
    partial void OnSmallProductCategoryCodeChanging(string value);
    partial void OnSmallProductCategoryCodeChanged();
    partial void OnSmallProductCategoryNameChanging(string value);
    partial void OnSmallProductCategoryNameChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public ProductCategory()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		this._Category = default(EntityRef<Category>);
		OnCreated();
	}
	
	[Column(Storage="_SmallProductCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SmallProductCategoryID
	{
		get
		{
			return this._SmallProductCategoryID;
		}
		set
		{
			if ((this._SmallProductCategoryID != value))
			{
				this.OnSmallProductCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._SmallProductCategoryID = value;
				this.SendPropertyChanged("SmallProductCategoryID");
				this.OnSmallProductCategoryIDChanged();
			}
		}
	}
	
	[Column(Storage="_SmallProductCategoryCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string SmallProductCategoryCode
	{
		get
		{
			return this._SmallProductCategoryCode;
		}
		set
		{
			if ((this._SmallProductCategoryCode != value))
			{
				this.OnSmallProductCategoryCodeChanging(value);
				this.SendPropertyChanging();
				this._SmallProductCategoryCode = value;
				this.SendPropertyChanged("SmallProductCategoryCode");
				this.OnSmallProductCategoryCodeChanged();
			}
		}
	}
	
	[Column(Storage="_SmallProductCategoryName", DbType="NVarChar(50)")]
	public string SmallProductCategoryName
	{
		get
		{
			return this._SmallProductCategoryName;
		}
		set
		{
			if ((this._SmallProductCategoryName != value))
			{
				this.OnSmallProductCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._SmallProductCategoryName = value;
				this.SendPropertyChanged("SmallProductCategoryName");
				this.OnSmallProductCategoryNameChanged();
			}
		}
	}
	
	[Column(Storage="_CategoryID", DbType="Int")]
	public System.Nullable<int> CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(100)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(50)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="ProductCategory_Product", Storage="_Products", OtherKey="SmallProductCategoryID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	[Association(Name="Category_ProductCategory", Storage="_Category", ThisKey="CategoryID", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.ProductCategories.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.ProductCategories.Add(this);
					this._CategoryID = value.CategoryID;
				}
				else
				{
					this._CategoryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.ProductCategory = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.ProductCategory = null;
	}
}

[Table(Name="dbo.Products")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ProductID;
	
	private string _ProductCode;
	
	private string _Title;
	
	private System.Nullable<int> _Number;
	
	private string _SubTitle;
	
	private string _Detail;
	
	private System.Nullable<int> _SmallProductCategoryID;
	
	private string _Production;
	
	private System.Nullable<int> _SuppliersID;
	
	private string _Money;
	
	private string _Image;
	
	private System.Nullable<bool> _IsDisplay;
	
	private System.Nullable<int> _TotalView;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<System.DateTime> _ModifyDate;
	
	private string _Origin;
	
	private string _Maker;
	
	private string _Goods;
	
	private string _Color;
	
	private string _Features;
	
	private string _Note;
	
	private EntitySet<AccountProduct> _AccountProducts;
	
	private EntitySet<Comment> _Comments;
	
	private EntityRef<ProductCategory> _ProductCategory;
	
	private EntityRef<Supplier> _Supplier;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(long value);
    partial void OnProductIDChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnSubTitleChanging(string value);
    partial void OnSubTitleChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnSmallProductCategoryIDChanging(System.Nullable<int> value);
    partial void OnSmallProductCategoryIDChanged();
    partial void OnProductionChanging(string value);
    partial void OnProductionChanged();
    partial void OnSuppliersIDChanging(System.Nullable<int> value);
    partial void OnSuppliersIDChanged();
    partial void OnMoneyChanging(string value);
    partial void OnMoneyChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    partial void OnTotalViewChanging(System.Nullable<int> value);
    partial void OnTotalViewChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnOriginChanging(string value);
    partial void OnOriginChanged();
    partial void OnMakerChanging(string value);
    partial void OnMakerChanged();
    partial void OnGoodsChanging(string value);
    partial void OnGoodsChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnFeaturesChanging(string value);
    partial void OnFeaturesChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Product()
	{
		this._AccountProducts = new EntitySet<AccountProduct>(new Action<AccountProduct>(this.attach_AccountProducts), new Action<AccountProduct>(this.detach_AccountProducts));
		this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
		this._ProductCategory = default(EntityRef<ProductCategory>);
		this._Supplier = default(EntityRef<Supplier>);
		OnCreated();
	}
	
	[Column(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductCode", DbType="VarChar(50)")]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				this.OnProductCodeChanging(value);
				this.SendPropertyChanging();
				this._ProductCode = value;
				this.SendPropertyChanged("ProductCode");
				this.OnProductCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="Int")]
	public System.Nullable<int> Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_SubTitle", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string SubTitle
	{
		get
		{
			return this._SubTitle;
		}
		set
		{
			if ((this._SubTitle != value))
			{
				this.OnSubTitleChanging(value);
				this.SendPropertyChanging();
				this._SubTitle = value;
				this.SendPropertyChanged("SubTitle");
				this.OnSubTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Detail", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Detail
	{
		get
		{
			return this._Detail;
		}
		set
		{
			if ((this._Detail != value))
			{
				this.OnDetailChanging(value);
				this.SendPropertyChanging();
				this._Detail = value;
				this.SendPropertyChanged("Detail");
				this.OnDetailChanged();
			}
		}
	}
	
	[Column(Storage="_SmallProductCategoryID", DbType="Int")]
	public System.Nullable<int> SmallProductCategoryID
	{
		get
		{
			return this._SmallProductCategoryID;
		}
		set
		{
			if ((this._SmallProductCategoryID != value))
			{
				if (this._ProductCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSmallProductCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._SmallProductCategoryID = value;
				this.SendPropertyChanged("SmallProductCategoryID");
				this.OnSmallProductCategoryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Production", DbType="NVarChar(200)")]
	public string Production
	{
		get
		{
			return this._Production;
		}
		set
		{
			if ((this._Production != value))
			{
				this.OnProductionChanging(value);
				this.SendPropertyChanging();
				this._Production = value;
				this.SendPropertyChanged("Production");
				this.OnProductionChanged();
			}
		}
	}
	
	[Column(Storage="_SuppliersID", DbType="Int")]
	public System.Nullable<int> SuppliersID
	{
		get
		{
			return this._SuppliersID;
		}
		set
		{
			if ((this._SuppliersID != value))
			{
				if (this._Supplier.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSuppliersIDChanging(value);
				this.SendPropertyChanging();
				this._SuppliersID = value;
				this.SendPropertyChanged("SuppliersID");
				this.OnSuppliersIDChanged();
			}
		}
	}
	
	[Column(Storage="_Money", DbType="NVarChar(50)")]
	public string Money
	{
		get
		{
			return this._Money;
		}
		set
		{
			if ((this._Money != value))
			{
				this.OnMoneyChanging(value);
				this.SendPropertyChanging();
				this._Money = value;
				this.SendPropertyChanged("Money");
				this.OnMoneyChanged();
			}
		}
	}
	
	[Column(Storage="_Image", DbType="NVarChar(200)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[Column(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[Column(Storage="_TotalView", DbType="Int")]
	public System.Nullable<int> TotalView
	{
		get
		{
			return this._TotalView;
		}
		set
		{
			if ((this._TotalView != value))
			{
				this.OnTotalViewChanging(value);
				this.SendPropertyChanging();
				this._TotalView = value;
				this.SendPropertyChanged("TotalView");
				this.OnTotalViewChanged();
			}
		}
	}
	
	[Column(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[Column(Storage="_ModifyDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ModifyDate
	{
		get
		{
			return this._ModifyDate;
		}
		set
		{
			if ((this._ModifyDate != value))
			{
				this.OnModifyDateChanging(value);
				this.SendPropertyChanging();
				this._ModifyDate = value;
				this.SendPropertyChanged("ModifyDate");
				this.OnModifyDateChanged();
			}
		}
	}
	
	[Column(Storage="_Origin", DbType="NVarChar(200)")]
	public string Origin
	{
		get
		{
			return this._Origin;
		}
		set
		{
			if ((this._Origin != value))
			{
				this.OnOriginChanging(value);
				this.SendPropertyChanging();
				this._Origin = value;
				this.SendPropertyChanged("Origin");
				this.OnOriginChanged();
			}
		}
	}
	
	[Column(Storage="_Maker", DbType="NVarChar(100)")]
	public string Maker
	{
		get
		{
			return this._Maker;
		}
		set
		{
			if ((this._Maker != value))
			{
				this.OnMakerChanging(value);
				this.SendPropertyChanging();
				this._Maker = value;
				this.SendPropertyChanged("Maker");
				this.OnMakerChanged();
			}
		}
	}
	
	[Column(Storage="_Goods", DbType="NVarChar(200)")]
	public string Goods
	{
		get
		{
			return this._Goods;
		}
		set
		{
			if ((this._Goods != value))
			{
				this.OnGoodsChanging(value);
				this.SendPropertyChanging();
				this._Goods = value;
				this.SendPropertyChanged("Goods");
				this.OnGoodsChanged();
			}
		}
	}
	
	[Column(Storage="_Color", DbType="NVarChar(50)")]
	public string Color
	{
		get
		{
			return this._Color;
		}
		set
		{
			if ((this._Color != value))
			{
				this.OnColorChanging(value);
				this.SendPropertyChanging();
				this._Color = value;
				this.SendPropertyChanged("Color");
				this.OnColorChanged();
			}
		}
	}
	
	[Column(Storage="_Features", DbType="NVarChar(200)")]
	public string Features
	{
		get
		{
			return this._Features;
		}
		set
		{
			if ((this._Features != value))
			{
				this.OnFeaturesChanging(value);
				this.SendPropertyChanging();
				this._Features = value;
				this.SendPropertyChanged("Features");
				this.OnFeaturesChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(100)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Product_AccountProduct", Storage="_AccountProducts", OtherKey="ProductID")]
	public EntitySet<AccountProduct> AccountProducts
	{
		get
		{
			return this._AccountProducts;
		}
		set
		{
			this._AccountProducts.Assign(value);
		}
	}
	
	[Association(Name="Product_Comment", Storage="_Comments", OtherKey="ProductID")]
	public EntitySet<Comment> Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			this._Comments.Assign(value);
		}
	}
	
	[Association(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="SmallProductCategoryID", IsForeignKey=true)]
	public ProductCategory ProductCategory
	{
		get
		{
			return this._ProductCategory.Entity;
		}
		set
		{
			ProductCategory previousValue = this._ProductCategory.Entity;
			if (((previousValue != value) 
						|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProductCategory.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._ProductCategory.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._SmallProductCategoryID = value.SmallProductCategoryID;
				}
				else
				{
					this._SmallProductCategoryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProductCategory");
			}
		}
	}
	
	[Association(Name="Supplier_Product", Storage="_Supplier", ThisKey="SuppliersID", IsForeignKey=true)]
	public Supplier Supplier
	{
		get
		{
			return this._Supplier.Entity;
		}
		set
		{
			Supplier previousValue = this._Supplier.Entity;
			if (((previousValue != value) 
						|| (this._Supplier.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Supplier.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._Supplier.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._SuppliersID = value.SuppliersID;
				}
				else
				{
					this._SuppliersID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Supplier");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AccountProducts(AccountProduct entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_AccountProducts(AccountProduct entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}
#pragma warning restore 1591
