#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoAn4
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class InfoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttbl_Account(tbl_Account instance);
    partial void Updatetbl_Account(tbl_Account instance);
    partial void Deletetbl_Account(tbl_Account instance);
    partial void Inserttbl_Customer(tbl_Customer instance);
    partial void Updatetbl_Customer(tbl_Customer instance);
    partial void Deletetbl_Customer(tbl_Customer instance);
    partial void Inserttbl_Import(tbl_Import instance);
    partial void Updatetbl_Import(tbl_Import instance);
    partial void Deletetbl_Import(tbl_Import instance);
    partial void Inserttbl_ImportDetail(tbl_ImportDetail instance);
    partial void Updatetbl_ImportDetail(tbl_ImportDetail instance);
    partial void Deletetbl_ImportDetail(tbl_ImportDetail instance);
    partial void Inserttbl_Order(tbl_Order instance);
    partial void Updatetbl_Order(tbl_Order instance);
    partial void Deletetbl_Order(tbl_Order instance);
    partial void Inserttbl_Payment(tbl_Payment instance);
    partial void Updatetbl_Payment(tbl_Payment instance);
    partial void Deletetbl_Payment(tbl_Payment instance);
    partial void Inserttbl_Producer(tbl_Producer instance);
    partial void Updatetbl_Producer(tbl_Producer instance);
    partial void Deletetbl_Producer(tbl_Producer instance);
    partial void Inserttbl_OrderDetial(tbl_OrderDetial instance);
    partial void Updatetbl_OrderDetial(tbl_OrderDetial instance);
    partial void Deletetbl_OrderDetial(tbl_OrderDetial instance);
    partial void Inserttbl_Product(tbl_Product instance);
    partial void Updatetbl_Product(tbl_Product instance);
    partial void Deletetbl_Product(tbl_Product instance);
    partial void Inserttbl_Style(tbl_Style instance);
    partial void Updatetbl_Style(tbl_Style instance);
    partial void Deletetbl_Style(tbl_Style instance);
    partial void Inserttbl_Supplier(tbl_Supplier instance);
    partial void Updatetbl_Supplier(tbl_Supplier instance);
    partial void Deletetbl_Supplier(tbl_Supplier instance);
    partial void Inserttbl_Transport(tbl_Transport instance);
    partial void Updatetbl_Transport(tbl_Transport instance);
    partial void Deletetbl_Transport(tbl_Transport instance);
    partial void Inserttbl_Type(tbl_Type instance);
    partial void Updatetbl_Type(tbl_Type instance);
    partial void Deletetbl_Type(tbl_Type instance);
    #endregion
		
		public InfoDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InfoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbl_Account> tbl_Accounts
		{
			get
			{
				return this.GetTable<tbl_Account>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Customer> tbl_Customers
		{
			get
			{
				return this.GetTable<tbl_Customer>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Import> tbl_Imports
		{
			get
			{
				return this.GetTable<tbl_Import>();
			}
		}
		
		public System.Data.Linq.Table<tbl_ImportDetail> tbl_ImportDetails
		{
			get
			{
				return this.GetTable<tbl_ImportDetail>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Order> tbl_Orders
		{
			get
			{
				return this.GetTable<tbl_Order>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Payment> tbl_Payments
		{
			get
			{
				return this.GetTable<tbl_Payment>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Producer> tbl_Producers
		{
			get
			{
				return this.GetTable<tbl_Producer>();
			}
		}
		
		public System.Data.Linq.Table<tbl_OrderDetial> tbl_OrderDetials
		{
			get
			{
				return this.GetTable<tbl_OrderDetial>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Product> tbl_Products
		{
			get
			{
				return this.GetTable<tbl_Product>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Style> tbl_Styles
		{
			get
			{
				return this.GetTable<tbl_Style>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Supplier> tbl_Suppliers
		{
			get
			{
				return this.GetTable<tbl_Supplier>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Transport> tbl_Transports
		{
			get
			{
				return this.GetTable<tbl_Transport>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Type> tbl_Types
		{
			get
			{
				return this.GetTable<tbl_Type>();
			}
		}
		
		[Function(Name="dbo.ThongkeSP")]
		public ISingleResult<ThongkeSPResult> ThongkeSP([Parameter(DbType="NVarChar(50)")] string loaisp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loaisp);
			return ((ISingleResult<ThongkeSPResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TKHDNTheoNam")]
		public ISingleResult<TKHDNTheoNamResult> TKHDNTheoNam([Parameter(DbType="Int")] System.Nullable<int> nam)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nam);
			return ((ISingleResult<TKHDNTheoNamResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TKHDNTheoNgay")]
		public ISingleResult<TKHDNTheoNgayResult> TKHDNTheoNgay([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> ngay)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ngay);
			return ((ISingleResult<TKHDNTheoNgayResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TKHDNTheoTG")]
		public ISingleResult<TKHDNTheoTGResult> TKHDNTheoTG([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> tungay, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> denngay)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tungay, denngay);
			return ((ISingleResult<TKHDNTheoTGResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TKSPbanchaytheonam")]
		public ISingleResult<TKSPbanchaytheonamResult> TKSPbanchaytheonam([Parameter(DbType="Int")] System.Nullable<int> nam)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nam);
			return ((ISingleResult<TKSPbanchaytheonamResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TKSPbanchaytheongay")]
		public ISingleResult<TKSPbanchaytheongayResult> TKSPbanchaytheongay([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> ngay)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ngay);
			return ((ISingleResult<TKSPbanchaytheongayResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TKSPbanchaytheoTG")]
		public ISingleResult<TKSPbanchaytheoTGResult> TKSPbanchaytheoTG([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> tungay, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> denngay)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tungay, denngay);
			return ((ISingleResult<TKSPbanchaytheoTGResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TkDoanhthutheonam")]
		public ISingleResult<TkDoanhthutheonamResult> TkDoanhthutheonam([Parameter(DbType="Int")] System.Nullable<int> nam)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nam);
			return ((ISingleResult<TkDoanhthutheonamResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TkDoanhthutheongay")]
		public ISingleResult<TkDoanhthutheongayResult> TkDoanhthutheongay([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> ngay)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ngay);
			return ((ISingleResult<TkDoanhthutheongayResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TkDoanhthutheoTG")]
		public ISingleResult<TkDoanhthutheoTGResult> TkDoanhthutheoTG([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> tungay, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> denngay)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tungay, denngay);
			return ((ISingleResult<TkDoanhthutheoTGResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.tbl_Account")]
	public partial class tbl_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Account;
		
		private string _Password;
		
		private string _Power;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPowerChanging(string value);
    partial void OnPowerChanged();
    #endregion
		
		public tbl_Account()
		{
			OnCreated();
		}
		
		[Column(Storage="_Account", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Power", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_Customer")]
	public partial class tbl_Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _User;
		
		private string _Password;
		
		private string _FullName;
		
		private string _Email;
		
		private string _Address;
		
		private System.Nullable<int> _Phone;
		
		private EntitySet<tbl_Order> _tbl_Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(System.Nullable<int> value);
    partial void OnPhoneChanged();
    #endregion
		
		public tbl_Customer()
		{
			this._tbl_Orders = new EntitySet<tbl_Order>(new Action<tbl_Order>(this.attach_tbl_Orders), new Action<tbl_Order>(this.detach_tbl_Orders));
			OnCreated();
		}
		
		[Column(Name="[User]", Storage="_User", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="Int")]
		public System.Nullable<int> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Association(Name="tbl_Customer_tbl_Order", Storage="_tbl_Orders", ThisKey="User", OtherKey="Account")]
		public EntitySet<tbl_Order> tbl_Orders
		{
			get
			{
				return this._tbl_Orders;
			}
			set
			{
				this._tbl_Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Orders(tbl_Order entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Customer = this;
		}
		
		private void detach_tbl_Orders(tbl_Order entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Customer = null;
		}
	}
	
	[Table(Name="dbo.tbl_Import")]
	public partial class tbl_Import : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Import_ID;
		
		private System.DateTime _Date;
		
		private System.Nullable<double> _Money;
		
		private int _Supplier_ID;
		
		private EntityRef<tbl_Supplier> _tbl_Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImport_IDChanging(int value);
    partial void OnImport_IDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnMoneyChanging(System.Nullable<double> value);
    partial void OnMoneyChanged();
    partial void OnSupplier_IDChanging(int value);
    partial void OnSupplier_IDChanged();
    #endregion
		
		public tbl_Import()
		{
			this._tbl_Supplier = default(EntityRef<tbl_Supplier>);
			OnCreated();
		}
		
		[Column(Storage="_Import_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Import_ID
		{
			get
			{
				return this._Import_ID;
			}
			set
			{
				if ((this._Import_ID != value))
				{
					this.OnImport_IDChanging(value);
					this.SendPropertyChanging();
					this._Import_ID = value;
					this.SendPropertyChanged("Import_ID");
					this.OnImport_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Money", DbType="Float")]
		public System.Nullable<double> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_ID", DbType="Int NOT NULL")]
		public int Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					if (this._tbl_Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[Association(Name="tbl_Supplier_tbl_Import", Storage="_tbl_Supplier", ThisKey="Supplier_ID", IsForeignKey=true)]
		public tbl_Supplier tbl_Supplier
		{
			get
			{
				return this._tbl_Supplier.Entity;
			}
			set
			{
				tbl_Supplier previousValue = this._tbl_Supplier.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Supplier.Entity = null;
						previousValue.tbl_Imports.Remove(this);
					}
					this._tbl_Supplier.Entity = value;
					if ((value != null))
					{
						value.tbl_Imports.Add(this);
						this._Supplier_ID = value.Supplier_ID;
					}
					else
					{
						this._Supplier_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_ImportDetail")]
	public partial class tbl_ImportDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Import_ID;
		
		private int _Product_ID;
		
		private System.Nullable<double> _Price_Import;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<double> _Money;
		
		private EntityRef<tbl_Product> _tbl_Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImport_IDChanging(int value);
    partial void OnImport_IDChanged();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnPrice_ImportChanging(System.Nullable<double> value);
    partial void OnPrice_ImportChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnMoneyChanging(System.Nullable<double> value);
    partial void OnMoneyChanged();
    #endregion
		
		public tbl_ImportDetail()
		{
			this._tbl_Product = default(EntityRef<tbl_Product>);
			OnCreated();
		}
		
		[Column(Storage="_Import_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Import_ID
		{
			get
			{
				return this._Import_ID;
			}
			set
			{
				if ((this._Import_ID != value))
				{
					this.OnImport_IDChanging(value);
					this.SendPropertyChanging();
					this._Import_ID = value;
					this.SendPropertyChanged("Import_ID");
					this.OnImport_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Product_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._tbl_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Import", DbType="Float")]
		public System.Nullable<double> Price_Import
		{
			get
			{
				return this._Price_Import;
			}
			set
			{
				if ((this._Price_Import != value))
				{
					this.OnPrice_ImportChanging(value);
					this.SendPropertyChanging();
					this._Price_Import = value;
					this.SendPropertyChanged("Price_Import");
					this.OnPrice_ImportChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Money", DbType="Float")]
		public System.Nullable<double> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[Association(Name="tbl_Product_tbl_ImportDetail", Storage="_tbl_Product", ThisKey="Product_ID", IsForeignKey=true)]
		public tbl_Product tbl_Product
		{
			get
			{
				return this._tbl_Product.Entity;
			}
			set
			{
				tbl_Product previousValue = this._tbl_Product.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Product.Entity = null;
						previousValue.tbl_ImportDetails.Remove(this);
					}
					this._tbl_Product.Entity = value;
					if ((value != null))
					{
						value.tbl_ImportDetails.Add(this);
						this._Product_ID = value.Product_ID;
					}
					else
					{
						this._Product_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_Order")]
	public partial class tbl_Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Order_ID;
		
		private string _Account;
		
		private System.DateTime _Date;
		
		private int _Pay_ID;
		
		private int _Transport_ID;
		
		private string _Name_Received;
		
		private string _Address_Received;
		
		private System.Nullable<int> _Phone_Received;
		
		private string _Name_Pay;
		
		private string _Address_Pay;
		
		private System.Nullable<int> _Phone_Pay;
		
		private string _Mesage;
		
		private System.Nullable<double> _VAT_Gift;
		
		private System.Nullable<double> _SumWeight;
		
		private System.Nullable<double> _VAT_Transport;
		
		private System.Nullable<double> _SumMoney;
		
		private string _State;
		
		private EntitySet<tbl_OrderDetial> _tbl_OrderDetials;
		
		private EntityRef<tbl_Customer> _tbl_Customer;
		
		private EntityRef<tbl_Payment> _tbl_Payment;
		
		private EntityRef<tbl_Transport> _tbl_Transport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IDChanging(string value);
    partial void OnOrder_IDChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnPay_IDChanging(int value);
    partial void OnPay_IDChanged();
    partial void OnTransport_IDChanging(int value);
    partial void OnTransport_IDChanged();
    partial void OnName_ReceivedChanging(string value);
    partial void OnName_ReceivedChanged();
    partial void OnAddress_ReceivedChanging(string value);
    partial void OnAddress_ReceivedChanged();
    partial void OnPhone_ReceivedChanging(System.Nullable<int> value);
    partial void OnPhone_ReceivedChanged();
    partial void OnName_PayChanging(string value);
    partial void OnName_PayChanged();
    partial void OnAddress_PayChanging(string value);
    partial void OnAddress_PayChanged();
    partial void OnPhone_PayChanging(System.Nullable<int> value);
    partial void OnPhone_PayChanged();
    partial void OnMesageChanging(string value);
    partial void OnMesageChanged();
    partial void OnVAT_GiftChanging(System.Nullable<double> value);
    partial void OnVAT_GiftChanged();
    partial void OnSumWeightChanging(System.Nullable<double> value);
    partial void OnSumWeightChanged();
    partial void OnVAT_TransportChanging(System.Nullable<double> value);
    partial void OnVAT_TransportChanged();
    partial void OnSumMoneyChanging(System.Nullable<double> value);
    partial void OnSumMoneyChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public tbl_Order()
		{
			this._tbl_OrderDetials = new EntitySet<tbl_OrderDetial>(new Action<tbl_OrderDetial>(this.attach_tbl_OrderDetials), new Action<tbl_OrderDetial>(this.detach_tbl_OrderDetials));
			this._tbl_Customer = default(EntityRef<tbl_Customer>);
			this._tbl_Payment = default(EntityRef<tbl_Payment>);
			this._tbl_Transport = default(EntityRef<tbl_Transport>);
			OnCreated();
		}
		
		[Column(Storage="_Order_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Account", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					if (this._tbl_Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Pay_ID", DbType="Int NOT NULL")]
		public int Pay_ID
		{
			get
			{
				return this._Pay_ID;
			}
			set
			{
				if ((this._Pay_ID != value))
				{
					if (this._tbl_Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPay_IDChanging(value);
					this.SendPropertyChanging();
					this._Pay_ID = value;
					this.SendPropertyChanged("Pay_ID");
					this.OnPay_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Transport_ID", DbType="Int NOT NULL")]
		public int Transport_ID
		{
			get
			{
				return this._Transport_ID;
			}
			set
			{
				if ((this._Transport_ID != value))
				{
					if (this._tbl_Transport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransport_IDChanging(value);
					this.SendPropertyChanging();
					this._Transport_ID = value;
					this.SendPropertyChanged("Transport_ID");
					this.OnTransport_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Name_Received", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name_Received
		{
			get
			{
				return this._Name_Received;
			}
			set
			{
				if ((this._Name_Received != value))
				{
					this.OnName_ReceivedChanging(value);
					this.SendPropertyChanging();
					this._Name_Received = value;
					this.SendPropertyChanged("Name_Received");
					this.OnName_ReceivedChanged();
				}
			}
		}
		
		[Column(Storage="_Address_Received", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address_Received
		{
			get
			{
				return this._Address_Received;
			}
			set
			{
				if ((this._Address_Received != value))
				{
					this.OnAddress_ReceivedChanging(value);
					this.SendPropertyChanging();
					this._Address_Received = value;
					this.SendPropertyChanged("Address_Received");
					this.OnAddress_ReceivedChanged();
				}
			}
		}
		
		[Column(Storage="_Phone_Received", DbType="Int")]
		public System.Nullable<int> Phone_Received
		{
			get
			{
				return this._Phone_Received;
			}
			set
			{
				if ((this._Phone_Received != value))
				{
					this.OnPhone_ReceivedChanging(value);
					this.SendPropertyChanging();
					this._Phone_Received = value;
					this.SendPropertyChanged("Phone_Received");
					this.OnPhone_ReceivedChanged();
				}
			}
		}
		
		[Column(Storage="_Name_Pay", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name_Pay
		{
			get
			{
				return this._Name_Pay;
			}
			set
			{
				if ((this._Name_Pay != value))
				{
					this.OnName_PayChanging(value);
					this.SendPropertyChanging();
					this._Name_Pay = value;
					this.SendPropertyChanged("Name_Pay");
					this.OnName_PayChanged();
				}
			}
		}
		
		[Column(Storage="_Address_Pay", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address_Pay
		{
			get
			{
				return this._Address_Pay;
			}
			set
			{
				if ((this._Address_Pay != value))
				{
					this.OnAddress_PayChanging(value);
					this.SendPropertyChanging();
					this._Address_Pay = value;
					this.SendPropertyChanged("Address_Pay");
					this.OnAddress_PayChanged();
				}
			}
		}
		
		[Column(Storage="_Phone_Pay", DbType="Int")]
		public System.Nullable<int> Phone_Pay
		{
			get
			{
				return this._Phone_Pay;
			}
			set
			{
				if ((this._Phone_Pay != value))
				{
					this.OnPhone_PayChanging(value);
					this.SendPropertyChanging();
					this._Phone_Pay = value;
					this.SendPropertyChanged("Phone_Pay");
					this.OnPhone_PayChanged();
				}
			}
		}
		
		[Column(Storage="_Mesage", DbType="NVarChar(MAX)")]
		public string Mesage
		{
			get
			{
				return this._Mesage;
			}
			set
			{
				if ((this._Mesage != value))
				{
					this.OnMesageChanging(value);
					this.SendPropertyChanging();
					this._Mesage = value;
					this.SendPropertyChanged("Mesage");
					this.OnMesageChanged();
				}
			}
		}
		
		[Column(Storage="_VAT_Gift", DbType="Float")]
		public System.Nullable<double> VAT_Gift
		{
			get
			{
				return this._VAT_Gift;
			}
			set
			{
				if ((this._VAT_Gift != value))
				{
					this.OnVAT_GiftChanging(value);
					this.SendPropertyChanging();
					this._VAT_Gift = value;
					this.SendPropertyChanged("VAT_Gift");
					this.OnVAT_GiftChanged();
				}
			}
		}
		
		[Column(Storage="_SumWeight", DbType="Float")]
		public System.Nullable<double> SumWeight
		{
			get
			{
				return this._SumWeight;
			}
			set
			{
				if ((this._SumWeight != value))
				{
					this.OnSumWeightChanging(value);
					this.SendPropertyChanging();
					this._SumWeight = value;
					this.SendPropertyChanged("SumWeight");
					this.OnSumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_VAT_Transport", DbType="Float")]
		public System.Nullable<double> VAT_Transport
		{
			get
			{
				return this._VAT_Transport;
			}
			set
			{
				if ((this._VAT_Transport != value))
				{
					this.OnVAT_TransportChanging(value);
					this.SendPropertyChanging();
					this._VAT_Transport = value;
					this.SendPropertyChanged("VAT_Transport");
					this.OnVAT_TransportChanged();
				}
			}
		}
		
		[Column(Storage="_SumMoney", DbType="Float")]
		public System.Nullable<double> SumMoney
		{
			get
			{
				return this._SumMoney;
			}
			set
			{
				if ((this._SumMoney != value))
				{
					this.OnSumMoneyChanging(value);
					this.SendPropertyChanging();
					this._SumMoney = value;
					this.SendPropertyChanged("SumMoney");
					this.OnSumMoneyChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Association(Name="tbl_Order_tbl_OrderDetial", Storage="_tbl_OrderDetials", OtherKey="Order_ID")]
		public EntitySet<tbl_OrderDetial> tbl_OrderDetials
		{
			get
			{
				return this._tbl_OrderDetials;
			}
			set
			{
				this._tbl_OrderDetials.Assign(value);
			}
		}
		
		[Association(Name="tbl_Customer_tbl_Order", Storage="_tbl_Customer", ThisKey="Account", OtherKey="User", IsForeignKey=true)]
		public tbl_Customer tbl_Customer
		{
			get
			{
				return this._tbl_Customer.Entity;
			}
			set
			{
				tbl_Customer previousValue = this._tbl_Customer.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Customer.Entity = null;
						previousValue.tbl_Orders.Remove(this);
					}
					this._tbl_Customer.Entity = value;
					if ((value != null))
					{
						value.tbl_Orders.Add(this);
						this._Account = value.User;
					}
					else
					{
						this._Account = default(string);
					}
					this.SendPropertyChanged("tbl_Customer");
				}
			}
		}
		
		[Association(Name="tbl_Payment_tbl_Order", Storage="_tbl_Payment", ThisKey="Pay_ID", IsForeignKey=true)]
		public tbl_Payment tbl_Payment
		{
			get
			{
				return this._tbl_Payment.Entity;
			}
			set
			{
				tbl_Payment previousValue = this._tbl_Payment.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Payment.Entity = null;
						previousValue.tbl_Orders.Remove(this);
					}
					this._tbl_Payment.Entity = value;
					if ((value != null))
					{
						value.tbl_Orders.Add(this);
						this._Pay_ID = value.Pay_ID;
					}
					else
					{
						this._Pay_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Payment");
				}
			}
		}
		
		[Association(Name="tbl_Transport_tbl_Order", Storage="_tbl_Transport", ThisKey="Transport_ID", IsForeignKey=true)]
		public tbl_Transport tbl_Transport
		{
			get
			{
				return this._tbl_Transport.Entity;
			}
			set
			{
				tbl_Transport previousValue = this._tbl_Transport.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Transport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Transport.Entity = null;
						previousValue.tbl_Orders.Remove(this);
					}
					this._tbl_Transport.Entity = value;
					if ((value != null))
					{
						value.tbl_Orders.Add(this);
						this._Transport_ID = value.Transport_ID;
					}
					else
					{
						this._Transport_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Transport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_OrderDetials(tbl_OrderDetial entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Order = this;
		}
		
		private void detach_tbl_OrderDetials(tbl_OrderDetial entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Order = null;
		}
	}
	
	[Table(Name="dbo.tbl_Payment")]
	public partial class tbl_Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Pay_ID;
		
		private string _Pay_Name;
		
		private EntitySet<tbl_Order> _tbl_Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPay_IDChanging(int value);
    partial void OnPay_IDChanged();
    partial void OnPay_NameChanging(string value);
    partial void OnPay_NameChanged();
    #endregion
		
		public tbl_Payment()
		{
			this._tbl_Orders = new EntitySet<tbl_Order>(new Action<tbl_Order>(this.attach_tbl_Orders), new Action<tbl_Order>(this.detach_tbl_Orders));
			OnCreated();
		}
		
		[Column(Storage="_Pay_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Pay_ID
		{
			get
			{
				return this._Pay_ID;
			}
			set
			{
				if ((this._Pay_ID != value))
				{
					this.OnPay_IDChanging(value);
					this.SendPropertyChanging();
					this._Pay_ID = value;
					this.SendPropertyChanged("Pay_ID");
					this.OnPay_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Pay_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Pay_Name
		{
			get
			{
				return this._Pay_Name;
			}
			set
			{
				if ((this._Pay_Name != value))
				{
					this.OnPay_NameChanging(value);
					this.SendPropertyChanging();
					this._Pay_Name = value;
					this.SendPropertyChanged("Pay_Name");
					this.OnPay_NameChanged();
				}
			}
		}
		
		[Association(Name="tbl_Payment_tbl_Order", Storage="_tbl_Orders", OtherKey="Pay_ID")]
		public EntitySet<tbl_Order> tbl_Orders
		{
			get
			{
				return this._tbl_Orders;
			}
			set
			{
				this._tbl_Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Orders(tbl_Order entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Payment = this;
		}
		
		private void detach_tbl_Orders(tbl_Order entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Payment = null;
		}
	}
	
	[Table(Name="dbo.tbl_Producer")]
	public partial class tbl_Producer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Producer_ID;
		
		private string _Producer_Name;
		
		private EntitySet<tbl_Product> _tbl_Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProducer_IDChanging(int value);
    partial void OnProducer_IDChanged();
    partial void OnProducer_NameChanging(string value);
    partial void OnProducer_NameChanged();
    #endregion
		
		public tbl_Producer()
		{
			this._tbl_Products = new EntitySet<tbl_Product>(new Action<tbl_Product>(this.attach_tbl_Products), new Action<tbl_Product>(this.detach_tbl_Products));
			OnCreated();
		}
		
		[Column(Storage="_Producer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Producer_ID
		{
			get
			{
				return this._Producer_ID;
			}
			set
			{
				if ((this._Producer_ID != value))
				{
					this.OnProducer_IDChanging(value);
					this.SendPropertyChanging();
					this._Producer_ID = value;
					this.SendPropertyChanged("Producer_ID");
					this.OnProducer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Producer_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Producer_Name
		{
			get
			{
				return this._Producer_Name;
			}
			set
			{
				if ((this._Producer_Name != value))
				{
					this.OnProducer_NameChanging(value);
					this.SendPropertyChanging();
					this._Producer_Name = value;
					this.SendPropertyChanged("Producer_Name");
					this.OnProducer_NameChanged();
				}
			}
		}
		
		[Association(Name="tbl_Producer_tbl_Product", Storage="_tbl_Products", OtherKey="Producer_ID")]
		public EntitySet<tbl_Product> tbl_Products
		{
			get
			{
				return this._tbl_Products;
			}
			set
			{
				this._tbl_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Producer = this;
		}
		
		private void detach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Producer = null;
		}
	}
	
	[Table(Name="dbo.tbl_OrderDetial")]
	public partial class tbl_OrderDetial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Order_ID;
		
		private int _Product_ID;
		
		private System.Nullable<double> _Price_Export;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<double> _Money;
		
		private string _State;
		
		private EntityRef<tbl_Order> _tbl_Order;
		
		private EntityRef<tbl_Product> _tbl_Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IDChanging(string value);
    partial void OnOrder_IDChanged();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnPrice_ExportChanging(System.Nullable<double> value);
    partial void OnPrice_ExportChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnMoneyChanging(System.Nullable<double> value);
    partial void OnMoneyChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public tbl_OrderDetial()
		{
			this._tbl_Order = default(EntityRef<tbl_Order>);
			this._tbl_Product = default(EntityRef<tbl_Product>);
			OnCreated();
		}
		
		[Column(Storage="_Order_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					if (this._tbl_Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Product_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._tbl_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Export", DbType="Float")]
		public System.Nullable<double> Price_Export
		{
			get
			{
				return this._Price_Export;
			}
			set
			{
				if ((this._Price_Export != value))
				{
					this.OnPrice_ExportChanging(value);
					this.SendPropertyChanging();
					this._Price_Export = value;
					this.SendPropertyChanged("Price_Export");
					this.OnPrice_ExportChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Money", DbType="Float")]
		public System.Nullable<double> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Association(Name="tbl_Order_tbl_OrderDetial", Storage="_tbl_Order", ThisKey="Order_ID", IsForeignKey=true)]
		public tbl_Order tbl_Order
		{
			get
			{
				return this._tbl_Order.Entity;
			}
			set
			{
				tbl_Order previousValue = this._tbl_Order.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Order.Entity = null;
						previousValue.tbl_OrderDetials.Remove(this);
					}
					this._tbl_Order.Entity = value;
					if ((value != null))
					{
						value.tbl_OrderDetials.Add(this);
						this._Order_ID = value.Order_ID;
					}
					else
					{
						this._Order_ID = default(string);
					}
					this.SendPropertyChanged("tbl_Order");
				}
			}
		}
		
		[Association(Name="tbl_Product_tbl_OrderDetial", Storage="_tbl_Product", ThisKey="Product_ID", IsForeignKey=true)]
		public tbl_Product tbl_Product
		{
			get
			{
				return this._tbl_Product.Entity;
			}
			set
			{
				tbl_Product previousValue = this._tbl_Product.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Product.Entity = null;
						previousValue.tbl_OrderDetials.Remove(this);
					}
					this._tbl_Product.Entity = value;
					if ((value != null))
					{
						value.tbl_OrderDetials.Add(this);
						this._Product_ID = value.Product_ID;
					}
					else
					{
						this._Product_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_Product")]
	public partial class tbl_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_ID;
		
		private string _Product_Name;
		
		private int _Type_ID;
		
		private int _Style_ID;
		
		private int _Producer_ID;
		
		private int _Supplier_ID;
		
		private string _Image;
		
		private string _Color;
		
		private string _Material;
		
		private string _Size;
		
		private System.Nullable<double> _Price_Import;
		
		private double _Price_Export;
		
		private System.Nullable<int> _Amount;
		
		private double _Weight;
		
		private EntitySet<tbl_ImportDetail> _tbl_ImportDetails;
		
		private EntitySet<tbl_OrderDetial> _tbl_OrderDetials;
		
		private EntityRef<tbl_Producer> _tbl_Producer;
		
		private EntityRef<tbl_Style> _tbl_Style;
		
		private EntityRef<tbl_Supplier> _tbl_Supplier;
		
		private EntityRef<tbl_Type> _tbl_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnProduct_NameChanging(string value);
    partial void OnProduct_NameChanged();
    partial void OnType_IDChanging(int value);
    partial void OnType_IDChanged();
    partial void OnStyle_IDChanging(int value);
    partial void OnStyle_IDChanged();
    partial void OnProducer_IDChanging(int value);
    partial void OnProducer_IDChanged();
    partial void OnSupplier_IDChanging(int value);
    partial void OnSupplier_IDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnMaterialChanging(string value);
    partial void OnMaterialChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnPrice_ImportChanging(System.Nullable<double> value);
    partial void OnPrice_ImportChanged();
    partial void OnPrice_ExportChanging(double value);
    partial void OnPrice_ExportChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    #endregion
		
		public tbl_Product()
		{
			this._tbl_ImportDetails = new EntitySet<tbl_ImportDetail>(new Action<tbl_ImportDetail>(this.attach_tbl_ImportDetails), new Action<tbl_ImportDetail>(this.detach_tbl_ImportDetails));
			this._tbl_OrderDetials = new EntitySet<tbl_OrderDetial>(new Action<tbl_OrderDetial>(this.attach_tbl_OrderDetials), new Action<tbl_OrderDetial>(this.detach_tbl_OrderDetials));
			this._tbl_Producer = default(EntityRef<tbl_Producer>);
			this._tbl_Style = default(EntityRef<tbl_Style>);
			this._tbl_Supplier = default(EntityRef<tbl_Supplier>);
			this._tbl_Type = default(EntityRef<tbl_Type>);
			OnCreated();
		}
		
		[Column(Storage="_Product_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Product_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Name
		{
			get
			{
				return this._Product_Name;
			}
			set
			{
				if ((this._Product_Name != value))
				{
					this.OnProduct_NameChanging(value);
					this.SendPropertyChanging();
					this._Product_Name = value;
					this.SendPropertyChanged("Product_Name");
					this.OnProduct_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Type_ID", DbType="Int NOT NULL")]
		public int Type_ID
		{
			get
			{
				return this._Type_ID;
			}
			set
			{
				if ((this._Type_ID != value))
				{
					if (this._tbl_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnType_IDChanging(value);
					this.SendPropertyChanging();
					this._Type_ID = value;
					this.SendPropertyChanged("Type_ID");
					this.OnType_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Style_ID", DbType="Int NOT NULL")]
		public int Style_ID
		{
			get
			{
				return this._Style_ID;
			}
			set
			{
				if ((this._Style_ID != value))
				{
					if (this._tbl_Style.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStyle_IDChanging(value);
					this.SendPropertyChanging();
					this._Style_ID = value;
					this.SendPropertyChanged("Style_ID");
					this.OnStyle_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Producer_ID", DbType="Int NOT NULL")]
		public int Producer_ID
		{
			get
			{
				return this._Producer_ID;
			}
			set
			{
				if ((this._Producer_ID != value))
				{
					if (this._tbl_Producer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProducer_IDChanging(value);
					this.SendPropertyChanging();
					this._Producer_ID = value;
					this.SendPropertyChanged("Producer_ID");
					this.OnProducer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_ID", DbType="Int NOT NULL")]
		public int Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					if (this._tbl_Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="NVarChar(50)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Material", DbType="NVarChar(50)")]
		public string Material
		{
			get
			{
				return this._Material;
			}
			set
			{
				if ((this._Material != value))
				{
					this.OnMaterialChanging(value);
					this.SendPropertyChanging();
					this._Material = value;
					this.SendPropertyChanged("Material");
					this.OnMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="NChar(10)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Import", DbType="Float")]
		public System.Nullable<double> Price_Import
		{
			get
			{
				return this._Price_Import;
			}
			set
			{
				if ((this._Price_Import != value))
				{
					this.OnPrice_ImportChanging(value);
					this.SendPropertyChanging();
					this._Price_Import = value;
					this.SendPropertyChanged("Price_Import");
					this.OnPrice_ImportChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Export", DbType="Float NOT NULL")]
		public double Price_Export
		{
			get
			{
				return this._Price_Export;
			}
			set
			{
				if ((this._Price_Export != value))
				{
					this.OnPrice_ExportChanging(value);
					this.SendPropertyChanging();
					this._Price_Export = value;
					this.SendPropertyChanged("Price_Export");
					this.OnPrice_ExportChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Association(Name="tbl_Product_tbl_ImportDetail", Storage="_tbl_ImportDetails", OtherKey="Product_ID")]
		public EntitySet<tbl_ImportDetail> tbl_ImportDetails
		{
			get
			{
				return this._tbl_ImportDetails;
			}
			set
			{
				this._tbl_ImportDetails.Assign(value);
			}
		}
		
		[Association(Name="tbl_Product_tbl_OrderDetial", Storage="_tbl_OrderDetials", OtherKey="Product_ID")]
		public EntitySet<tbl_OrderDetial> tbl_OrderDetials
		{
			get
			{
				return this._tbl_OrderDetials;
			}
			set
			{
				this._tbl_OrderDetials.Assign(value);
			}
		}
		
		[Association(Name="tbl_Producer_tbl_Product", Storage="_tbl_Producer", ThisKey="Producer_ID", IsForeignKey=true)]
		public tbl_Producer tbl_Producer
		{
			get
			{
				return this._tbl_Producer.Entity;
			}
			set
			{
				tbl_Producer previousValue = this._tbl_Producer.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Producer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Producer.Entity = null;
						previousValue.tbl_Products.Remove(this);
					}
					this._tbl_Producer.Entity = value;
					if ((value != null))
					{
						value.tbl_Products.Add(this);
						this._Producer_ID = value.Producer_ID;
					}
					else
					{
						this._Producer_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Producer");
				}
			}
		}
		
		[Association(Name="tbl_Style_tbl_Product", Storage="_tbl_Style", ThisKey="Style_ID", IsForeignKey=true)]
		public tbl_Style tbl_Style
		{
			get
			{
				return this._tbl_Style.Entity;
			}
			set
			{
				tbl_Style previousValue = this._tbl_Style.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Style.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Style.Entity = null;
						previousValue.tbl_Products.Remove(this);
					}
					this._tbl_Style.Entity = value;
					if ((value != null))
					{
						value.tbl_Products.Add(this);
						this._Style_ID = value.Style_ID;
					}
					else
					{
						this._Style_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Style");
				}
			}
		}
		
		[Association(Name="tbl_Supplier_tbl_Product", Storage="_tbl_Supplier", ThisKey="Supplier_ID", IsForeignKey=true)]
		public tbl_Supplier tbl_Supplier
		{
			get
			{
				return this._tbl_Supplier.Entity;
			}
			set
			{
				tbl_Supplier previousValue = this._tbl_Supplier.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Supplier.Entity = null;
						previousValue.tbl_Products.Remove(this);
					}
					this._tbl_Supplier.Entity = value;
					if ((value != null))
					{
						value.tbl_Products.Add(this);
						this._Supplier_ID = value.Supplier_ID;
					}
					else
					{
						this._Supplier_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Supplier");
				}
			}
		}
		
		[Association(Name="tbl_Type_tbl_Product", Storage="_tbl_Type", ThisKey="Type_ID", IsForeignKey=true)]
		public tbl_Type tbl_Type
		{
			get
			{
				return this._tbl_Type.Entity;
			}
			set
			{
				tbl_Type previousValue = this._tbl_Type.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Type.Entity = null;
						previousValue.tbl_Products.Remove(this);
					}
					this._tbl_Type.Entity = value;
					if ((value != null))
					{
						value.tbl_Products.Add(this);
						this._Type_ID = value.Type_ID;
					}
					else
					{
						this._Type_ID = default(int);
					}
					this.SendPropertyChanged("tbl_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_ImportDetails(tbl_ImportDetail entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Product = this;
		}
		
		private void detach_tbl_ImportDetails(tbl_ImportDetail entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Product = null;
		}
		
		private void attach_tbl_OrderDetials(tbl_OrderDetial entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Product = this;
		}
		
		private void detach_tbl_OrderDetials(tbl_OrderDetial entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Product = null;
		}
	}
	
	[Table(Name="dbo.tbl_Style")]
	public partial class tbl_Style : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Style_ID;
		
		private string _Style_Name;
		
		private EntitySet<tbl_Product> _tbl_Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStyle_IDChanging(int value);
    partial void OnStyle_IDChanged();
    partial void OnStyle_NameChanging(string value);
    partial void OnStyle_NameChanged();
    #endregion
		
		public tbl_Style()
		{
			this._tbl_Products = new EntitySet<tbl_Product>(new Action<tbl_Product>(this.attach_tbl_Products), new Action<tbl_Product>(this.detach_tbl_Products));
			OnCreated();
		}
		
		[Column(Storage="_Style_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Style_ID
		{
			get
			{
				return this._Style_ID;
			}
			set
			{
				if ((this._Style_ID != value))
				{
					this.OnStyle_IDChanging(value);
					this.SendPropertyChanging();
					this._Style_ID = value;
					this.SendPropertyChanged("Style_ID");
					this.OnStyle_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Style_Name", DbType="NVarChar(50)")]
		public string Style_Name
		{
			get
			{
				return this._Style_Name;
			}
			set
			{
				if ((this._Style_Name != value))
				{
					this.OnStyle_NameChanging(value);
					this.SendPropertyChanging();
					this._Style_Name = value;
					this.SendPropertyChanged("Style_Name");
					this.OnStyle_NameChanged();
				}
			}
		}
		
		[Association(Name="tbl_Style_tbl_Product", Storage="_tbl_Products", OtherKey="Style_ID")]
		public EntitySet<tbl_Product> tbl_Products
		{
			get
			{
				return this._tbl_Products;
			}
			set
			{
				this._tbl_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Style = this;
		}
		
		private void detach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Style = null;
		}
	}
	
	[Table(Name="dbo.tbl_Supplier")]
	public partial class tbl_Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Supplier_ID;
		
		private string _Supplier_Name;
		
		private string _Address;
		
		private System.Nullable<int> _Phone;
		
		private string _Email;
		
		private EntitySet<tbl_Import> _tbl_Imports;
		
		private EntitySet<tbl_Product> _tbl_Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplier_IDChanging(int value);
    partial void OnSupplier_IDChanged();
    partial void OnSupplier_NameChanging(string value);
    partial void OnSupplier_NameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(System.Nullable<int> value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public tbl_Supplier()
		{
			this._tbl_Imports = new EntitySet<tbl_Import>(new Action<tbl_Import>(this.attach_tbl_Imports), new Action<tbl_Import>(this.detach_tbl_Imports));
			this._tbl_Products = new EntitySet<tbl_Product>(new Action<tbl_Product>(this.attach_tbl_Products), new Action<tbl_Product>(this.detach_tbl_Products));
			OnCreated();
		}
		
		[Column(Storage="_Supplier_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Supplier_Name
		{
			get
			{
				return this._Supplier_Name;
			}
			set
			{
				if ((this._Supplier_Name != value))
				{
					this.OnSupplier_NameChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Name = value;
					this.SendPropertyChanged("Supplier_Name");
					this.OnSupplier_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="Int")]
		public System.Nullable<int> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="tbl_Supplier_tbl_Import", Storage="_tbl_Imports", OtherKey="Supplier_ID")]
		public EntitySet<tbl_Import> tbl_Imports
		{
			get
			{
				return this._tbl_Imports;
			}
			set
			{
				this._tbl_Imports.Assign(value);
			}
		}
		
		[Association(Name="tbl_Supplier_tbl_Product", Storage="_tbl_Products", OtherKey="Supplier_ID")]
		public EntitySet<tbl_Product> tbl_Products
		{
			get
			{
				return this._tbl_Products;
			}
			set
			{
				this._tbl_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Imports(tbl_Import entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Supplier = this;
		}
		
		private void detach_tbl_Imports(tbl_Import entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Supplier = null;
		}
		
		private void attach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Supplier = this;
		}
		
		private void detach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Supplier = null;
		}
	}
	
	[Table(Name="dbo.tbl_Transport")]
	public partial class tbl_Transport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Transport_ID;
		
		private string _Transport_Name;
		
		private EntitySet<tbl_Order> _tbl_Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransport_IDChanging(int value);
    partial void OnTransport_IDChanged();
    partial void OnTransport_NameChanging(string value);
    partial void OnTransport_NameChanged();
    #endregion
		
		public tbl_Transport()
		{
			this._tbl_Orders = new EntitySet<tbl_Order>(new Action<tbl_Order>(this.attach_tbl_Orders), new Action<tbl_Order>(this.detach_tbl_Orders));
			OnCreated();
		}
		
		[Column(Storage="_Transport_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Transport_ID
		{
			get
			{
				return this._Transport_ID;
			}
			set
			{
				if ((this._Transport_ID != value))
				{
					this.OnTransport_IDChanging(value);
					this.SendPropertyChanging();
					this._Transport_ID = value;
					this.SendPropertyChanged("Transport_ID");
					this.OnTransport_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Transport_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Transport_Name
		{
			get
			{
				return this._Transport_Name;
			}
			set
			{
				if ((this._Transport_Name != value))
				{
					this.OnTransport_NameChanging(value);
					this.SendPropertyChanging();
					this._Transport_Name = value;
					this.SendPropertyChanged("Transport_Name");
					this.OnTransport_NameChanged();
				}
			}
		}
		
		[Association(Name="tbl_Transport_tbl_Order", Storage="_tbl_Orders", OtherKey="Transport_ID")]
		public EntitySet<tbl_Order> tbl_Orders
		{
			get
			{
				return this._tbl_Orders;
			}
			set
			{
				this._tbl_Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Orders(tbl_Order entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Transport = this;
		}
		
		private void detach_tbl_Orders(tbl_Order entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Transport = null;
		}
	}
	
	[Table(Name="dbo.tbl_Type")]
	public partial class tbl_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Type_ID;
		
		private string _Type_Name;
		
		private EntitySet<tbl_Product> _tbl_Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnType_IDChanging(int value);
    partial void OnType_IDChanged();
    partial void OnType_NameChanging(string value);
    partial void OnType_NameChanged();
    #endregion
		
		public tbl_Type()
		{
			this._tbl_Products = new EntitySet<tbl_Product>(new Action<tbl_Product>(this.attach_tbl_Products), new Action<tbl_Product>(this.detach_tbl_Products));
			OnCreated();
		}
		
		[Column(Storage="_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Type_ID
		{
			get
			{
				return this._Type_ID;
			}
			set
			{
				if ((this._Type_ID != value))
				{
					this.OnType_IDChanging(value);
					this.SendPropertyChanging();
					this._Type_ID = value;
					this.SendPropertyChanged("Type_ID");
					this.OnType_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Type_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type_Name
		{
			get
			{
				return this._Type_Name;
			}
			set
			{
				if ((this._Type_Name != value))
				{
					this.OnType_NameChanging(value);
					this.SendPropertyChanging();
					this._Type_Name = value;
					this.SendPropertyChanged("Type_Name");
					this.OnType_NameChanged();
				}
			}
		}
		
		[Association(Name="tbl_Type_tbl_Product", Storage="_tbl_Products", OtherKey="Type_ID")]
		public EntitySet<tbl_Product> tbl_Products
		{
			get
			{
				return this._tbl_Products;
			}
			set
			{
				this._tbl_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Type = this;
		}
		
		private void detach_tbl_Products(tbl_Product entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Type = null;
		}
	}
	
	public partial class ThongkeSPResult
	{
		
		private int _Product_ID;
		
		private string _Product_Name;
		
		private string _Type_Name;
		
		private string _Style_Name;
		
		private string _Supplier_Name;
		
		private string _Producer_Name;
		
		private string _Price_Import;
		
		private double _Price_Export;
		
		private System.Nullable<int> _Amount;
		
		public ThongkeSPResult()
		{
		}
		
		[Column(Storage="_Product_ID", DbType="Int NOT NULL")]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					this._Product_ID = value;
				}
			}
		}
		
		[Column(Storage="_Product_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Name
		{
			get
			{
				return this._Product_Name;
			}
			set
			{
				if ((this._Product_Name != value))
				{
					this._Product_Name = value;
				}
			}
		}
		
		[Column(Storage="_Type_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type_Name
		{
			get
			{
				return this._Type_Name;
			}
			set
			{
				if ((this._Type_Name != value))
				{
					this._Type_Name = value;
				}
			}
		}
		
		[Column(Storage="_Style_Name", DbType="NVarChar(50)")]
		public string Style_Name
		{
			get
			{
				return this._Style_Name;
			}
			set
			{
				if ((this._Style_Name != value))
				{
					this._Style_Name = value;
				}
			}
		}
		
		[Column(Storage="_Supplier_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Supplier_Name
		{
			get
			{
				return this._Supplier_Name;
			}
			set
			{
				if ((this._Supplier_Name != value))
				{
					this._Supplier_Name = value;
				}
			}
		}
		
		[Column(Storage="_Producer_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Producer_Name
		{
			get
			{
				return this._Producer_Name;
			}
			set
			{
				if ((this._Producer_Name != value))
				{
					this._Producer_Name = value;
				}
			}
		}
		
		[Column(Storage="_Price_Import", DbType="NChar(10)")]
		public string Price_Import
		{
			get
			{
				return this._Price_Import;
			}
			set
			{
				if ((this._Price_Import != value))
				{
					this._Price_Import = value;
				}
			}
		}
		
		[Column(Storage="_Price_Export", DbType="Float NOT NULL")]
		public double Price_Export
		{
			get
			{
				return this._Price_Export;
			}
			set
			{
				if ((this._Price_Export != value))
				{
					this._Price_Export = value;
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
	}
	
	public partial class TKHDNTheoNamResult
	{
		
		private System.DateTime _Ngày_nhập;
		
		private int _Mã_sản_phẩm;
		
		private int _Nhà_cung_cấp;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TKHDNTheoNamResult()
		{
		}
		
		[Column(Name="[Ngày nhập]", Storage="_Ngày_nhập", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày_nhập
		{
			get
			{
				return this._Ngày_nhập;
			}
			set
			{
				if ((this._Ngày_nhập != value))
				{
					this._Ngày_nhập = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Nhà cung cấp]", Storage="_Nhà_cung_cấp", DbType="Int NOT NULL")]
		public int Nhà_cung_cấp
		{
			get
			{
				return this._Nhà_cung_cấp;
			}
			set
			{
				if ((this._Nhà_cung_cấp != value))
				{
					this._Nhà_cung_cấp = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TKHDNTheoNgayResult
	{
		
		private System.DateTime _Ngày_nhập;
		
		private int _Mã_sản_phẩm;
		
		private int _Nhà_cung_cấp;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TKHDNTheoNgayResult()
		{
		}
		
		[Column(Name="[Ngày nhập]", Storage="_Ngày_nhập", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày_nhập
		{
			get
			{
				return this._Ngày_nhập;
			}
			set
			{
				if ((this._Ngày_nhập != value))
				{
					this._Ngày_nhập = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Nhà cung cấp]", Storage="_Nhà_cung_cấp", DbType="Int NOT NULL")]
		public int Nhà_cung_cấp
		{
			get
			{
				return this._Nhà_cung_cấp;
			}
			set
			{
				if ((this._Nhà_cung_cấp != value))
				{
					this._Nhà_cung_cấp = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TKHDNTheoTGResult
	{
		
		private System.DateTime _Ngày_nhập;
		
		private int _Mã_sản_phẩm;
		
		private int _Nhà_cung_cấp;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TKHDNTheoTGResult()
		{
		}
		
		[Column(Name="[Ngày nhập]", Storage="_Ngày_nhập", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày_nhập
		{
			get
			{
				return this._Ngày_nhập;
			}
			set
			{
				if ((this._Ngày_nhập != value))
				{
					this._Ngày_nhập = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Nhà cung cấp]", Storage="_Nhà_cung_cấp", DbType="Int NOT NULL")]
		public int Nhà_cung_cấp
		{
			get
			{
				return this._Nhà_cung_cấp;
			}
			set
			{
				if ((this._Nhà_cung_cấp != value))
				{
					this._Nhà_cung_cấp = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TKSPbanchaytheonamResult
	{
		
		private int _Mã_sản_phẩm;
		
		private System.Nullable<double> _Giá_xuất;
		
		private System.Nullable<double> _Số_lượng;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TKSPbanchaytheonamResult()
		{
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Giá xuất]", Storage="_Giá_xuất", DbType="Float")]
		public System.Nullable<double> Giá_xuất
		{
			get
			{
				return this._Giá_xuất;
			}
			set
			{
				if ((this._Giá_xuất != value))
				{
					this._Giá_xuất = value;
				}
			}
		}
		
		[Column(Name="[Số lượng]", Storage="_Số_lượng", DbType="Float")]
		public System.Nullable<double> Số_lượng
		{
			get
			{
				return this._Số_lượng;
			}
			set
			{
				if ((this._Số_lượng != value))
				{
					this._Số_lượng = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TKSPbanchaytheongayResult
	{
		
		private System.DateTime _Ngày;
		
		private int _Mã_sản_phẩm;
		
		private System.Nullable<double> _Giá_xuất;
		
		private System.Nullable<double> _Số_lượng;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TKSPbanchaytheongayResult()
		{
		}
		
		[Column(Storage="_Ngày", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày
		{
			get
			{
				return this._Ngày;
			}
			set
			{
				if ((this._Ngày != value))
				{
					this._Ngày = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Giá xuất]", Storage="_Giá_xuất", DbType="Float")]
		public System.Nullable<double> Giá_xuất
		{
			get
			{
				return this._Giá_xuất;
			}
			set
			{
				if ((this._Giá_xuất != value))
				{
					this._Giá_xuất = value;
				}
			}
		}
		
		[Column(Name="[Số lượng]", Storage="_Số_lượng", DbType="Float")]
		public System.Nullable<double> Số_lượng
		{
			get
			{
				return this._Số_lượng;
			}
			set
			{
				if ((this._Số_lượng != value))
				{
					this._Số_lượng = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TKSPbanchaytheoTGResult
	{
		
		private System.DateTime _Ngày;
		
		private int _Mã_sản_phẩm;
		
		private System.Nullable<double> _Giá_xuất;
		
		private System.Nullable<double> _Số_lượng;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TKSPbanchaytheoTGResult()
		{
		}
		
		[Column(Storage="_Ngày", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày
		{
			get
			{
				return this._Ngày;
			}
			set
			{
				if ((this._Ngày != value))
				{
					this._Ngày = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Giá xuất]", Storage="_Giá_xuất", DbType="Float")]
		public System.Nullable<double> Giá_xuất
		{
			get
			{
				return this._Giá_xuất;
			}
			set
			{
				if ((this._Giá_xuất != value))
				{
					this._Giá_xuất = value;
				}
			}
		}
		
		[Column(Name="[Số lượng]", Storage="_Số_lượng", DbType="Float")]
		public System.Nullable<double> Số_lượng
		{
			get
			{
				return this._Số_lượng;
			}
			set
			{
				if ((this._Số_lượng != value))
				{
					this._Số_lượng = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TkDoanhthutheonamResult
	{
		
		private int _Mã_sản_phẩm;
		
		private System.Nullable<double> _Giá_nhập;
		
		private double _Giá_xuất;
		
		private System.Nullable<double> _Số_lượng;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TkDoanhthutheonamResult()
		{
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Giá nhập]", Storage="_Giá_nhập", DbType="Float")]
		public System.Nullable<double> Giá_nhập
		{
			get
			{
				return this._Giá_nhập;
			}
			set
			{
				if ((this._Giá_nhập != value))
				{
					this._Giá_nhập = value;
				}
			}
		}
		
		[Column(Name="[Giá xuất]", Storage="_Giá_xuất", DbType="Float NOT NULL")]
		public double Giá_xuất
		{
			get
			{
				return this._Giá_xuất;
			}
			set
			{
				if ((this._Giá_xuất != value))
				{
					this._Giá_xuất = value;
				}
			}
		}
		
		[Column(Name="[Số lượng]", Storage="_Số_lượng", DbType="Float")]
		public System.Nullable<double> Số_lượng
		{
			get
			{
				return this._Số_lượng;
			}
			set
			{
				if ((this._Số_lượng != value))
				{
					this._Số_lượng = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TkDoanhthutheongayResult
	{
		
		private System.DateTime _Ngày_bán;
		
		private int _Mã_sản_phẩm;
		
		private System.Nullable<double> _Giá_nhập;
		
		private double _Giá_xuất;
		
		private System.Nullable<double> _Số_lượng;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TkDoanhthutheongayResult()
		{
		}
		
		[Column(Name="[Ngày bán]", Storage="_Ngày_bán", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày_bán
		{
			get
			{
				return this._Ngày_bán;
			}
			set
			{
				if ((this._Ngày_bán != value))
				{
					this._Ngày_bán = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Giá nhập]", Storage="_Giá_nhập", DbType="Float")]
		public System.Nullable<double> Giá_nhập
		{
			get
			{
				return this._Giá_nhập;
			}
			set
			{
				if ((this._Giá_nhập != value))
				{
					this._Giá_nhập = value;
				}
			}
		}
		
		[Column(Name="[Giá xuất]", Storage="_Giá_xuất", DbType="Float NOT NULL")]
		public double Giá_xuất
		{
			get
			{
				return this._Giá_xuất;
			}
			set
			{
				if ((this._Giá_xuất != value))
				{
					this._Giá_xuất = value;
				}
			}
		}
		
		[Column(Name="[Số lượng]", Storage="_Số_lượng", DbType="Float")]
		public System.Nullable<double> Số_lượng
		{
			get
			{
				return this._Số_lượng;
			}
			set
			{
				if ((this._Số_lượng != value))
				{
					this._Số_lượng = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
	
	public partial class TkDoanhthutheoTGResult
	{
		
		private System.DateTime _Ngày_bán;
		
		private int _Mã_sản_phẩm;
		
		private System.Nullable<double> _Giá_nhập;
		
		private double _Giá_xuất;
		
		private System.Nullable<double> _Số_lượng;
		
		private System.Nullable<double> _Thành_tiền;
		
		public TkDoanhthutheoTGResult()
		{
		}
		
		[Column(Name="[Ngày bán]", Storage="_Ngày_bán", DbType="DateTime NOT NULL")]
		public System.DateTime Ngày_bán
		{
			get
			{
				return this._Ngày_bán;
			}
			set
			{
				if ((this._Ngày_bán != value))
				{
					this._Ngày_bán = value;
				}
			}
		}
		
		[Column(Name="[Mã sản phẩm]", Storage="_Mã_sản_phẩm", DbType="Int NOT NULL")]
		public int Mã_sản_phẩm
		{
			get
			{
				return this._Mã_sản_phẩm;
			}
			set
			{
				if ((this._Mã_sản_phẩm != value))
				{
					this._Mã_sản_phẩm = value;
				}
			}
		}
		
		[Column(Name="[Giá nhập]", Storage="_Giá_nhập", DbType="Float")]
		public System.Nullable<double> Giá_nhập
		{
			get
			{
				return this._Giá_nhập;
			}
			set
			{
				if ((this._Giá_nhập != value))
				{
					this._Giá_nhập = value;
				}
			}
		}
		
		[Column(Name="[Giá xuất]", Storage="_Giá_xuất", DbType="Float NOT NULL")]
		public double Giá_xuất
		{
			get
			{
				return this._Giá_xuất;
			}
			set
			{
				if ((this._Giá_xuất != value))
				{
					this._Giá_xuất = value;
				}
			}
		}
		
		[Column(Name="[Số lượng]", Storage="_Số_lượng", DbType="Float")]
		public System.Nullable<double> Số_lượng
		{
			get
			{
				return this._Số_lượng;
			}
			set
			{
				if ((this._Số_lượng != value))
				{
					this._Số_lượng = value;
				}
			}
		}
		
		[Column(Name="[Thành tiền]", Storage="_Thành_tiền", DbType="Float")]
		public System.Nullable<double> Thành_tiền
		{
			get
			{
				return this._Thành_tiền;
			}
			set
			{
				if ((this._Thành_tiền != value))
				{
					this._Thành_tiền = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
