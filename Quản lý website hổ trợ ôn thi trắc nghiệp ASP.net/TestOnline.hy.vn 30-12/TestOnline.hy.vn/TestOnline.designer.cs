#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestOnline.hy.vn
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="onthitracnghiemOL")]
	public partial class TestOnlineDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InserttblThreadsOnline(tblThreadsOnline instance);
    partial void UpdatetblThreadsOnline(tblThreadsOnline instance);
    partial void DeletetblThreadsOnline(tblThreadsOnline instance);
    partial void InserttblAcount(tblAcount instance);
    partial void UpdatetblAcount(tblAcount instance);
    partial void DeletetblAcount(tblAcount instance);
    partial void InserttblCommand(tblCommand instance);
    partial void UpdatetblCommand(tblCommand instance);
    partial void DeletetblCommand(tblCommand instance);
    partial void InserttblQuestion(tblQuestion instance);
    partial void UpdatetblQuestion(tblQuestion instance);
    partial void DeletetblQuestion(tblQuestion instance);
    partial void InserttblRegulation(tblRegulation instance);
    partial void UpdatetblRegulation(tblRegulation instance);
    partial void DeletetblRegulation(tblRegulation instance);
    partial void InserttblRespon(tblRespon instance);
    partial void UpdatetblRespon(tblRespon instance);
    partial void DeletetblRespon(tblRespon instance);
    partial void InserttblResultsID(tblResultsID instance);
    partial void UpdatetblResultsID(tblResultsID instance);
    partial void DeletetblResultsID(tblResultsID instance);
    partial void InserttblStudent(tblStudent instance);
    partial void UpdatetblStudent(tblStudent instance);
    partial void DeletetblStudent(tblStudent instance);
    partial void InserttblSubject(tblSubject instance);
    partial void UpdatetblSubject(tblSubject instance);
    partial void DeletetblSubject(tblSubject instance);
    partial void InserttblThreadQuestion(tblThreadQuestion instance);
    partial void UpdatetblThreadQuestion(tblThreadQuestion instance);
    partial void DeletetblThreadQuestion(tblThreadQuestion instance);
    partial void InserttblThread(tblThread instance);
    partial void UpdatetblThread(tblThread instance);
    partial void DeletetblThread(tblThread instance);
    #endregion
		
		public TestOnlineDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["onthitracnghiemOLConnectionString2"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestOnlineDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestOnlineDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestOnlineDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestOnlineDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<tblThreadsOnline> tblThreadsOnlines
		{
			get
			{
				return this.GetTable<tblThreadsOnline>();
			}
		}
		
		public System.Data.Linq.Table<tblAcount> tblAcounts
		{
			get
			{
				return this.GetTable<tblAcount>();
			}
		}
		
		public System.Data.Linq.Table<tblCommand> tblCommands
		{
			get
			{
				return this.GetTable<tblCommand>();
			}
		}
		
		public System.Data.Linq.Table<tblQuestion> tblQuestions
		{
			get
			{
				return this.GetTable<tblQuestion>();
			}
		}
		
		public System.Data.Linq.Table<tblRegulation> tblRegulations
		{
			get
			{
				return this.GetTable<tblRegulation>();
			}
		}
		
		public System.Data.Linq.Table<tblRespon> tblRespons
		{
			get
			{
				return this.GetTable<tblRespon>();
			}
		}
		
		public System.Data.Linq.Table<tblResultsID> tblResultsIDs
		{
			get
			{
				return this.GetTable<tblResultsID>();
			}
		}
		
		public System.Data.Linq.Table<tblStudent> tblStudents
		{
			get
			{
				return this.GetTable<tblStudent>();
			}
		}
		
		public System.Data.Linq.Table<tblSubject> tblSubjects
		{
			get
			{
				return this.GetTable<tblSubject>();
			}
		}
		
		public System.Data.Linq.Table<tblThreadQuestion> tblThreadQuestions
		{
			get
			{
				return this.GetTable<tblThreadQuestion>();
			}
		}
		
		public System.Data.Linq.Table<tblThread> tblThreads
		{
			get
			{
				return this.GetTable<tblThread>();
			}
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryID;
		
		private string _CategoryName;
		
		private System.Nullable<int> _CategoryOrder;
		
		private string _Description;
		
		private string _Url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryOrderChanging(System.Nullable<int> value);
    partial void OnCategoryOrderChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Category()
		{
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryOrder", DbType="Int")]
		public System.Nullable<int> CategoryOrder
		{
			get
			{
				return this._CategoryOrder;
			}
			set
			{
				if ((this._CategoryOrder != value))
				{
					this.OnCategoryOrderChanging(value);
					this.SendPropertyChanging();
					this._CategoryOrder = value;
					this.SendPropertyChanged("CategoryOrder");
					this.OnCategoryOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(200)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblThreadsOnline")]
	public partial class tblThreadsOnline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ThreadsID;
		
		private System.Nullable<int> _Status;
		
		private EntityRef<tblThread> _tblThread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadsIDChanging(string value);
    partial void OnThreadsIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public tblThreadsOnline()
		{
			this._tblThread = default(EntityRef<tblThread>);
			OnCreated();
		}
		
		[Column(Storage="_ThreadsID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThreadsID
		{
			get
			{
				return this._ThreadsID;
			}
			set
			{
				if ((this._ThreadsID != value))
				{
					if (this._tblThread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadsIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadsID = value;
					this.SendPropertyChanged("ThreadsID");
					this.OnThreadsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="tblThread_tblThreadsOnline", Storage="_tblThread", ThisKey="ThreadsID", IsForeignKey=true)]
		public tblThread tblThread
		{
			get
			{
				return this._tblThread.Entity;
			}
			set
			{
				tblThread previousValue = this._tblThread.Entity;
				if (((previousValue != value) 
							|| (this._tblThread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblThread.Entity = null;
						previousValue.tblThreadsOnline = null;
					}
					this._tblThread.Entity = value;
					if ((value != null))
					{
						value.tblThreadsOnline = this;
						this._ThreadsID = value.ThreadsID;
					}
					else
					{
						this._ThreadsID = default(string);
					}
					this.SendPropertyChanged("tblThread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblAcount")]
	public partial class tblAcount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AcountID;
		
		private string _Pass;
		
		private string _FullName;
		
		private string _Brithday;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcountIDChanging(string value);
    partial void OnAcountIDChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnBrithdayChanging(string value);
    partial void OnBrithdayChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public tblAcount()
		{
			OnCreated();
		}
		
		[Column(Storage="_AcountID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AcountID
		{
			get
			{
				return this._AcountID;
			}
			set
			{
				if ((this._AcountID != value))
				{
					this.OnAcountIDChanging(value);
					this.SendPropertyChanging();
					this._AcountID = value;
					this.SendPropertyChanged("AcountID");
					this.OnAcountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Pass", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Brithday", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brithday
		{
			get
			{
				return this._Brithday;
			}
			set
			{
				if ((this._Brithday != value))
				{
					this.OnBrithdayChanging(value);
					this.SendPropertyChanging();
					this._Brithday = value;
					this.SendPropertyChanged("Brithday");
					this.OnBrithdayChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblCommand")]
	public partial class tblCommand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandID;
		
		private string _StudentID;
		
		private string _CommandName;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<tblRespon> _tblRespons;
		
		private EntityRef<tblStudent> _tblStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnCommandNameChanging(string value);
    partial void OnCommandNameChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public tblCommand()
		{
			this._tblRespons = new EntitySet<tblRespon>(new Action<tblRespon>(this.attach_tblRespons), new Action<tblRespon>(this.detach_tblRespons));
			this._tblStudent = default(EntityRef<tblStudent>);
			OnCreated();
		}
		
		[Column(Storage="_CommandID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._tblStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommandName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CommandName
		{
			get
			{
				return this._CommandName;
			}
			set
			{
				if ((this._CommandName != value))
				{
					this.OnCommandNameChanging(value);
					this.SendPropertyChanging();
					this._CommandName = value;
					this.SendPropertyChanged("CommandName");
					this.OnCommandNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Association(Name="tblCommand_tblRespon", Storage="_tblRespons", OtherKey="CommandID")]
		public EntitySet<tblRespon> tblRespons
		{
			get
			{
				return this._tblRespons;
			}
			set
			{
				this._tblRespons.Assign(value);
			}
		}
		
		[Association(Name="tblStudent_tblCommand", Storage="_tblStudent", ThisKey="StudentID", IsForeignKey=true)]
		public tblStudent tblStudent
		{
			get
			{
				return this._tblStudent.Entity;
			}
			set
			{
				tblStudent previousValue = this._tblStudent.Entity;
				if (((previousValue != value) 
							|| (this._tblStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStudent.Entity = null;
						previousValue.tblCommands.Remove(this);
					}
					this._tblStudent.Entity = value;
					if ((value != null))
					{
						value.tblCommands.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(string);
					}
					this.SendPropertyChanged("tblStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRespons(tblRespon entity)
		{
			this.SendPropertyChanging();
			entity.tblCommand = this;
		}
		
		private void detach_tblRespons(tblRespon entity)
		{
			this.SendPropertyChanging();
			entity.tblCommand = null;
		}
	}
	
	[Table(Name="dbo.tblQuestions")]
	public partial class tblQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionsID;
		
		private string _SubjectID;
		
		private string _Content;
		
		private string _ChocieA;
		
		private string _ChocieB;
		
		private string _ChocieC;
		
		private string _ChocieD;
		
		private string _Answer;
		
		private System.Nullable<int> _Level;
		
		private System.Nullable<bool> _State;
		
		private EntitySet<tblThreadQuestion> _tblThreadQuestions;
		
		private EntityRef<tblSubject> _tblSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionsIDChanging(int value);
    partial void OnQuestionsIDChanged();
    partial void OnSubjectIDChanging(string value);
    partial void OnSubjectIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnChocieAChanging(string value);
    partial void OnChocieAChanged();
    partial void OnChocieBChanging(string value);
    partial void OnChocieBChanged();
    partial void OnChocieCChanging(string value);
    partial void OnChocieCChanged();
    partial void OnChocieDChanging(string value);
    partial void OnChocieDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnStateChanging(System.Nullable<bool> value);
    partial void OnStateChanged();
    #endregion
		
		public tblQuestion()
		{
			this._tblThreadQuestions = new EntitySet<tblThreadQuestion>(new Action<tblThreadQuestion>(this.attach_tblThreadQuestions), new Action<tblThreadQuestion>(this.detach_tblThreadQuestions));
			this._tblSubject = default(EntityRef<tblSubject>);
			OnCreated();
		}
		
		[Column(Storage="_QuestionsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionsID
		{
			get
			{
				return this._QuestionsID;
			}
			set
			{
				if ((this._QuestionsID != value))
				{
					this.OnQuestionsIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionsID = value;
					this.SendPropertyChanged("QuestionsID");
					this.OnQuestionsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._tblSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_ChocieA", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChocieA
		{
			get
			{
				return this._ChocieA;
			}
			set
			{
				if ((this._ChocieA != value))
				{
					this.OnChocieAChanging(value);
					this.SendPropertyChanging();
					this._ChocieA = value;
					this.SendPropertyChanged("ChocieA");
					this.OnChocieAChanged();
				}
			}
		}
		
		[Column(Storage="_ChocieB", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChocieB
		{
			get
			{
				return this._ChocieB;
			}
			set
			{
				if ((this._ChocieB != value))
				{
					this.OnChocieBChanging(value);
					this.SendPropertyChanging();
					this._ChocieB = value;
					this.SendPropertyChanged("ChocieB");
					this.OnChocieBChanged();
				}
			}
		}
		
		[Column(Storage="_ChocieC", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChocieC
		{
			get
			{
				return this._ChocieC;
			}
			set
			{
				if ((this._ChocieC != value))
				{
					this.OnChocieCChanging(value);
					this.SendPropertyChanging();
					this._ChocieC = value;
					this.SendPropertyChanged("ChocieC");
					this.OnChocieCChanged();
				}
			}
		}
		
		[Column(Storage="_ChocieD", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChocieD
		{
			get
			{
				return this._ChocieD;
			}
			set
			{
				if ((this._ChocieD != value))
				{
					this.OnChocieDChanging(value);
					this.SendPropertyChanging();
					this._ChocieD = value;
					this.SendPropertyChanged("ChocieD");
					this.OnChocieDChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Bit")]
		public System.Nullable<bool> State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Association(Name="tblQuestion_tblThreadQuestion", Storage="_tblThreadQuestions", OtherKey="QuestionsID")]
		public EntitySet<tblThreadQuestion> tblThreadQuestions
		{
			get
			{
				return this._tblThreadQuestions;
			}
			set
			{
				this._tblThreadQuestions.Assign(value);
			}
		}
		
		[Association(Name="tblSubject_tblQuestion", Storage="_tblSubject", ThisKey="SubjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblSubject tblSubject
		{
			get
			{
				return this._tblSubject.Entity;
			}
			set
			{
				tblSubject previousValue = this._tblSubject.Entity;
				if (((previousValue != value) 
							|| (this._tblSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSubject.Entity = null;
						previousValue.tblQuestions.Remove(this);
					}
					this._tblSubject.Entity = value;
					if ((value != null))
					{
						value.tblQuestions.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(string);
					}
					this.SendPropertyChanged("tblSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblThreadQuestions(tblThreadQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = this;
		}
		
		private void detach_tblThreadQuestions(tblThreadQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = null;
		}
	}
	
	[Table(Name="dbo.tblRegulations")]
	public partial class tblRegulation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegulationID;
		
		private string _Year;
		
		private string _Titile;
		
		private string _Url;
		
		private System.DateTime _CreateDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegulationIDChanging(int value);
    partial void OnRegulationIDChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnTitileChanging(string value);
    partial void OnTitileChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public tblRegulation()
		{
			OnCreated();
		}
		
		[Column(Storage="_RegulationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegulationID
		{
			get
			{
				return this._RegulationID;
			}
			set
			{
				if ((this._RegulationID != value))
				{
					this.OnRegulationIDChanging(value);
					this.SendPropertyChanging();
					this._RegulationID = value;
					this.SendPropertyChanged("RegulationID");
					this.OnRegulationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Titile", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Titile
		{
			get
			{
				return this._Titile;
			}
			set
			{
				if ((this._Titile != value))
				{
					this.OnTitileChanging(value);
					this.SendPropertyChanging();
					this._Titile = value;
					this.SendPropertyChanged("Titile");
					this.OnTitileChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblRespon")]
	public partial class tblRespon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandID;
		
		private int _ResponCommandID;
		
		private string _ResponInformation;
		
		private EntityRef<tblCommand> _tblCommand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnResponCommandIDChanging(int value);
    partial void OnResponCommandIDChanged();
    partial void OnResponInformationChanging(string value);
    partial void OnResponInformationChanged();
    #endregion
		
		public tblRespon()
		{
			this._tblCommand = default(EntityRef<tblCommand>);
			OnCreated();
		}
		
		[Column(Storage="_CommandID", DbType="Int NOT NULL")]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					if (this._tblCommand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResponCommandID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResponCommandID
		{
			get
			{
				return this._ResponCommandID;
			}
			set
			{
				if ((this._ResponCommandID != value))
				{
					this.OnResponCommandIDChanging(value);
					this.SendPropertyChanging();
					this._ResponCommandID = value;
					this.SendPropertyChanged("ResponCommandID");
					this.OnResponCommandIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResponInformation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ResponInformation
		{
			get
			{
				return this._ResponInformation;
			}
			set
			{
				if ((this._ResponInformation != value))
				{
					this.OnResponInformationChanging(value);
					this.SendPropertyChanging();
					this._ResponInformation = value;
					this.SendPropertyChanged("ResponInformation");
					this.OnResponInformationChanged();
				}
			}
		}
		
		[Association(Name="tblCommand_tblRespon", Storage="_tblCommand", ThisKey="CommandID", IsForeignKey=true)]
		public tblCommand tblCommand
		{
			get
			{
				return this._tblCommand.Entity;
			}
			set
			{
				tblCommand previousValue = this._tblCommand.Entity;
				if (((previousValue != value) 
							|| (this._tblCommand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCommand.Entity = null;
						previousValue.tblRespons.Remove(this);
					}
					this._tblCommand.Entity = value;
					if ((value != null))
					{
						value.tblRespons.Add(this);
						this._CommandID = value.CommandID;
					}
					else
					{
						this._CommandID = default(int);
					}
					this.SendPropertyChanged("tblCommand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblResultsID")]
	public partial class tblResultsID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ThreadsID;
		
		private string _StudentID;
		
		private int _ResultsID;
		
		private System.Nullable<System.DateTime> _TestDate;
		
		private System.Nullable<double> _Score;
		
		private EntityRef<tblStudent> _tblStudent;
		
		private EntityRef<tblThread> _tblThread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadsIDChanging(string value);
    partial void OnThreadsIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnResultsIDChanging(int value);
    partial void OnResultsIDChanged();
    partial void OnTestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTestDateChanged();
    partial void OnScoreChanging(System.Nullable<double> value);
    partial void OnScoreChanged();
    #endregion
		
		public tblResultsID()
		{
			this._tblStudent = default(EntityRef<tblStudent>);
			this._tblThread = default(EntityRef<tblThread>);
			OnCreated();
		}
		
		[Column(Storage="_ThreadsID", DbType="VarChar(10)")]
		public string ThreadsID
		{
			get
			{
				return this._ThreadsID;
			}
			set
			{
				if ((this._ThreadsID != value))
				{
					if (this._tblThread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadsIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadsID = value;
					this.SendPropertyChanged("ThreadsID");
					this.OnThreadsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentID", DbType="VarChar(10)")]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._tblStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResultsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultsID
		{
			get
			{
				return this._ResultsID;
			}
			set
			{
				if ((this._ResultsID != value))
				{
					this.OnResultsIDChanging(value);
					this.SendPropertyChanging();
					this._ResultsID = value;
					this.SendPropertyChanged("ResultsID");
					this.OnResultsIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Float")]
		public System.Nullable<double> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="tblStudent_tblResultsID", Storage="_tblStudent", ThisKey="StudentID", IsForeignKey=true, DeleteRule="CASCADE")]
		public tblStudent tblStudent
		{
			get
			{
				return this._tblStudent.Entity;
			}
			set
			{
				tblStudent previousValue = this._tblStudent.Entity;
				if (((previousValue != value) 
							|| (this._tblStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStudent.Entity = null;
						previousValue.tblResultsIDs.Remove(this);
					}
					this._tblStudent.Entity = value;
					if ((value != null))
					{
						value.tblResultsIDs.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(string);
					}
					this.SendPropertyChanged("tblStudent");
				}
			}
		}
		
		[Association(Name="tblThread_tblResultsID", Storage="_tblThread", ThisKey="ThreadsID", IsForeignKey=true, DeleteRule="CASCADE")]
		public tblThread tblThread
		{
			get
			{
				return this._tblThread.Entity;
			}
			set
			{
				tblThread previousValue = this._tblThread.Entity;
				if (((previousValue != value) 
							|| (this._tblThread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblThread.Entity = null;
						previousValue.tblResultsIDs.Remove(this);
					}
					this._tblThread.Entity = value;
					if ((value != null))
					{
						value.tblResultsIDs.Add(this);
						this._ThreadsID = value.ThreadsID;
					}
					else
					{
						this._ThreadsID = default(string);
					}
					this.SendPropertyChanged("tblThread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblStudent")]
	public partial class tblStudent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudentID;
		
		private string _StudentName;
		
		private string _Birthday;
		
		private string _Password;
		
		private string _Nativevilage;
		
		private System.Nullable<System.DateTime> _RegistrationDate;
		
		private string _Email;
		
		private string _City;
		
		private EntitySet<tblCommand> _tblCommands;
		
		private EntitySet<tblResultsID> _tblResultsIDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnBirthdayChanging(string value);
    partial void OnBirthdayChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNativevilageChanging(string value);
    partial void OnNativevilageChanged();
    partial void OnRegistrationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegistrationDateChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    #endregion
		
		public tblStudent()
		{
			this._tblCommands = new EntitySet<tblCommand>(new Action<tblCommand>(this.attach_tblCommands), new Action<tblCommand>(this.detach_tblCommands));
			this._tblResultsIDs = new EntitySet<tblResultsID>(new Action<tblResultsID>(this.attach_tblResultsIDs), new Action<tblResultsID>(this.detach_tblResultsIDs));
			OnCreated();
		}
		
		[Column(Storage="_StudentID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Nativevilage", DbType="NVarChar(50)")]
		public string Nativevilage
		{
			get
			{
				return this._Nativevilage;
			}
			set
			{
				if ((this._Nativevilage != value))
				{
					this.OnNativevilageChanging(value);
					this.SendPropertyChanging();
					this._Nativevilage = value;
					this.SendPropertyChanged("Nativevilage");
					this.OnNativevilageChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Association(Name="tblStudent_tblCommand", Storage="_tblCommands", OtherKey="StudentID")]
		public EntitySet<tblCommand> tblCommands
		{
			get
			{
				return this._tblCommands;
			}
			set
			{
				this._tblCommands.Assign(value);
			}
		}
		
		[Association(Name="tblStudent_tblResultsID", Storage="_tblResultsIDs", OtherKey="StudentID")]
		public EntitySet<tblResultsID> tblResultsIDs
		{
			get
			{
				return this._tblResultsIDs;
			}
			set
			{
				this._tblResultsIDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCommands(tblCommand entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = this;
		}
		
		private void detach_tblCommands(tblCommand entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = null;
		}
		
		private void attach_tblResultsIDs(tblResultsID entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = this;
		}
		
		private void detach_tblResultsIDs(tblResultsID entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = null;
		}
	}
	
	[Table(Name="dbo.tblSubject")]
	public partial class tblSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubjectID;
		
		private string _SubjectName;
		
		private EntitySet<tblQuestion> _tblQuestions;
		
		private EntitySet<tblThread> _tblThreads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(string value);
    partial void OnSubjectIDChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
		
		public tblSubject()
		{
			this._tblQuestions = new EntitySet<tblQuestion>(new Action<tblQuestion>(this.attach_tblQuestions), new Action<tblQuestion>(this.detach_tblQuestions));
			this._tblThreads = new EntitySet<tblThread>(new Action<tblThread>(this.attach_tblThreads), new Action<tblThread>(this.detach_tblThreads));
			OnCreated();
		}
		
		[Column(Storage="_SubjectID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[Association(Name="tblSubject_tblQuestion", Storage="_tblQuestions", OtherKey="SubjectID")]
		public EntitySet<tblQuestion> tblQuestions
		{
			get
			{
				return this._tblQuestions;
			}
			set
			{
				this._tblQuestions.Assign(value);
			}
		}
		
		[Association(Name="tblSubject_tblThread", Storage="_tblThreads", OtherKey="SubjectID")]
		public EntitySet<tblThread> tblThreads
		{
			get
			{
				return this._tblThreads;
			}
			set
			{
				this._tblThreads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblQuestions(tblQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = this;
		}
		
		private void detach_tblQuestions(tblQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = null;
		}
		
		private void attach_tblThreads(tblThread entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = this;
		}
		
		private void detach_tblThreads(tblThread entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = null;
		}
	}
	
	[Table(Name="dbo.tblThreadQuestions")]
	public partial class tblThreadQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThreadQuestionID;
		
		private int _QuestionsID;
		
		private string _ThreadsID;
		
		private EntityRef<tblQuestion> _tblQuestion;
		
		private EntityRef<tblThread> _tblThread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadQuestionIDChanging(int value);
    partial void OnThreadQuestionIDChanged();
    partial void OnQuestionsIDChanging(int value);
    partial void OnQuestionsIDChanged();
    partial void OnThreadsIDChanging(string value);
    partial void OnThreadsIDChanged();
    #endregion
		
		public tblThreadQuestion()
		{
			this._tblQuestion = default(EntityRef<tblQuestion>);
			this._tblThread = default(EntityRef<tblThread>);
			OnCreated();
		}
		
		[Column(Storage="_ThreadQuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThreadQuestionID
		{
			get
			{
				return this._ThreadQuestionID;
			}
			set
			{
				if ((this._ThreadQuestionID != value))
				{
					this.OnThreadQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadQuestionID = value;
					this.SendPropertyChanged("ThreadQuestionID");
					this.OnThreadQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionsID", DbType="Int NOT NULL")]
		public int QuestionsID
		{
			get
			{
				return this._QuestionsID;
			}
			set
			{
				if ((this._QuestionsID != value))
				{
					if (this._tblQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionsIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionsID = value;
					this.SendPropertyChanged("QuestionsID");
					this.OnQuestionsIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThreadsID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ThreadsID
		{
			get
			{
				return this._ThreadsID;
			}
			set
			{
				if ((this._ThreadsID != value))
				{
					if (this._tblThread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadsIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadsID = value;
					this.SendPropertyChanged("ThreadsID");
					this.OnThreadsIDChanged();
				}
			}
		}
		
		[Association(Name="tblQuestion_tblThreadQuestion", Storage="_tblQuestion", ThisKey="QuestionsID", IsForeignKey=true)]
		public tblQuestion tblQuestion
		{
			get
			{
				return this._tblQuestion.Entity;
			}
			set
			{
				tblQuestion previousValue = this._tblQuestion.Entity;
				if (((previousValue != value) 
							|| (this._tblQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblQuestion.Entity = null;
						previousValue.tblThreadQuestions.Remove(this);
					}
					this._tblQuestion.Entity = value;
					if ((value != null))
					{
						value.tblThreadQuestions.Add(this);
						this._QuestionsID = value.QuestionsID;
					}
					else
					{
						this._QuestionsID = default(int);
					}
					this.SendPropertyChanged("tblQuestion");
				}
			}
		}
		
		[Association(Name="tblThread_tblThreadQuestion", Storage="_tblThread", ThisKey="ThreadsID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblThread tblThread
		{
			get
			{
				return this._tblThread.Entity;
			}
			set
			{
				tblThread previousValue = this._tblThread.Entity;
				if (((previousValue != value) 
							|| (this._tblThread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblThread.Entity = null;
						previousValue.tblThreadQuestions.Remove(this);
					}
					this._tblThread.Entity = value;
					if ((value != null))
					{
						value.tblThreadQuestions.Add(this);
						this._ThreadsID = value.ThreadsID;
					}
					else
					{
						this._ThreadsID = default(string);
					}
					this.SendPropertyChanged("tblThread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblThreads")]
	public partial class tblThread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ThreadsID;
		
		private string _SubjectID;
		
		private System.Nullable<int> _Level;
		
		private System.Nullable<double> _MaxScores;
		
		private System.Nullable<System.DateTime> _DateTest;
		
		private string _TheadName;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _NumberQuestions;
		
		private System.DateTime _CreateDate;
		
		private string _Hour;
		
		private string _Minute;
		
		private System.Nullable<int> _HitCount;
		
		private EntityRef<tblThreadsOnline> _tblThreadsOnline;
		
		private EntitySet<tblResultsID> _tblResultsIDs;
		
		private EntitySet<tblThreadQuestion> _tblThreadQuestions;
		
		private EntityRef<tblSubject> _tblSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadsIDChanging(string value);
    partial void OnThreadsIDChanged();
    partial void OnSubjectIDChanging(string value);
    partial void OnSubjectIDChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnMaxScoresChanging(System.Nullable<double> value);
    partial void OnMaxScoresChanged();
    partial void OnDateTestChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTestChanged();
    partial void OnTheadNameChanging(string value);
    partial void OnTheadNameChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnNumberQuestionsChanging(System.Nullable<int> value);
    partial void OnNumberQuestionsChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnHourChanging(string value);
    partial void OnHourChanged();
    partial void OnMinuteChanging(string value);
    partial void OnMinuteChanged();
    partial void OnHitCountChanging(System.Nullable<int> value);
    partial void OnHitCountChanged();
    #endregion
		
		public tblThread()
		{
			this._tblThreadsOnline = default(EntityRef<tblThreadsOnline>);
			this._tblResultsIDs = new EntitySet<tblResultsID>(new Action<tblResultsID>(this.attach_tblResultsIDs), new Action<tblResultsID>(this.detach_tblResultsIDs));
			this._tblThreadQuestions = new EntitySet<tblThreadQuestion>(new Action<tblThreadQuestion>(this.attach_tblThreadQuestions), new Action<tblThreadQuestion>(this.detach_tblThreadQuestions));
			this._tblSubject = default(EntityRef<tblSubject>);
			OnCreated();
		}
		
		[Column(Storage="_ThreadsID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThreadsID
		{
			get
			{
				return this._ThreadsID;
			}
			set
			{
				if ((this._ThreadsID != value))
				{
					this.OnThreadsIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadsID = value;
					this.SendPropertyChanged("ThreadsID");
					this.OnThreadsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._tblSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_MaxScores", DbType="Float")]
		public System.Nullable<double> MaxScores
		{
			get
			{
				return this._MaxScores;
			}
			set
			{
				if ((this._MaxScores != value))
				{
					this.OnMaxScoresChanging(value);
					this.SendPropertyChanging();
					this._MaxScores = value;
					this.SendPropertyChanged("MaxScores");
					this.OnMaxScoresChanged();
				}
			}
		}
		
		[Column(Storage="_DateTest", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTest
		{
			get
			{
				return this._DateTest;
			}
			set
			{
				if ((this._DateTest != value))
				{
					this.OnDateTestChanging(value);
					this.SendPropertyChanging();
					this._DateTest = value;
					this.SendPropertyChanged("DateTest");
					this.OnDateTestChanged();
				}
			}
		}
		
		[Column(Storage="_TheadName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TheadName
		{
			get
			{
				return this._TheadName;
			}
			set
			{
				if ((this._TheadName != value))
				{
					this.OnTheadNameChanging(value);
					this.SendPropertyChanging();
					this._TheadName = value;
					this.SendPropertyChanged("TheadName");
					this.OnTheadNameChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_NumberQuestions", DbType="Int")]
		public System.Nullable<int> NumberQuestions
		{
			get
			{
				return this._NumberQuestions;
			}
			set
			{
				if ((this._NumberQuestions != value))
				{
					this.OnNumberQuestionsChanging(value);
					this.SendPropertyChanging();
					this._NumberQuestions = value;
					this.SendPropertyChanged("NumberQuestions");
					this.OnNumberQuestionsChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Hour", DbType="VarChar(10)")]
		public string Hour
		{
			get
			{
				return this._Hour;
			}
			set
			{
				if ((this._Hour != value))
				{
					this.OnHourChanging(value);
					this.SendPropertyChanging();
					this._Hour = value;
					this.SendPropertyChanged("Hour");
					this.OnHourChanged();
				}
			}
		}
		
		[Column(Storage="_Minute", DbType="VarChar(10)")]
		public string Minute
		{
			get
			{
				return this._Minute;
			}
			set
			{
				if ((this._Minute != value))
				{
					this.OnMinuteChanging(value);
					this.SendPropertyChanging();
					this._Minute = value;
					this.SendPropertyChanged("Minute");
					this.OnMinuteChanged();
				}
			}
		}
		
		[Column(Storage="_HitCount", DbType="Int")]
		public System.Nullable<int> HitCount
		{
			get
			{
				return this._HitCount;
			}
			set
			{
				if ((this._HitCount != value))
				{
					this.OnHitCountChanging(value);
					this.SendPropertyChanging();
					this._HitCount = value;
					this.SendPropertyChanged("HitCount");
					this.OnHitCountChanged();
				}
			}
		}
		
		[Association(Name="tblThread_tblThreadsOnline", Storage="_tblThreadsOnline", ThisKey="ThreadsID", IsUnique=true, IsForeignKey=false)]
		public tblThreadsOnline tblThreadsOnline
		{
			get
			{
				return this._tblThreadsOnline.Entity;
			}
			set
			{
				tblThreadsOnline previousValue = this._tblThreadsOnline.Entity;
				if (((previousValue != value) 
							|| (this._tblThreadsOnline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblThreadsOnline.Entity = null;
						previousValue.tblThread = null;
					}
					this._tblThreadsOnline.Entity = value;
					if ((value != null))
					{
						value.tblThread = this;
					}
					this.SendPropertyChanged("tblThreadsOnline");
				}
			}
		}
		
		[Association(Name="tblThread_tblResultsID", Storage="_tblResultsIDs", OtherKey="ThreadsID")]
		public EntitySet<tblResultsID> tblResultsIDs
		{
			get
			{
				return this._tblResultsIDs;
			}
			set
			{
				this._tblResultsIDs.Assign(value);
			}
		}
		
		[Association(Name="tblThread_tblThreadQuestion", Storage="_tblThreadQuestions", OtherKey="ThreadsID")]
		public EntitySet<tblThreadQuestion> tblThreadQuestions
		{
			get
			{
				return this._tblThreadQuestions;
			}
			set
			{
				this._tblThreadQuestions.Assign(value);
			}
		}
		
		[Association(Name="tblSubject_tblThread", Storage="_tblSubject", ThisKey="SubjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblSubject tblSubject
		{
			get
			{
				return this._tblSubject.Entity;
			}
			set
			{
				tblSubject previousValue = this._tblSubject.Entity;
				if (((previousValue != value) 
							|| (this._tblSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSubject.Entity = null;
						previousValue.tblThreads.Remove(this);
					}
					this._tblSubject.Entity = value;
					if ((value != null))
					{
						value.tblThreads.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(string);
					}
					this.SendPropertyChanged("tblSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblResultsIDs(tblResultsID entity)
		{
			this.SendPropertyChanging();
			entity.tblThread = this;
		}
		
		private void detach_tblResultsIDs(tblResultsID entity)
		{
			this.SendPropertyChanging();
			entity.tblThread = null;
		}
		
		private void attach_tblThreadQuestions(tblThreadQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblThread = this;
		}
		
		private void detach_tblThreadQuestions(tblThreadQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblThread = null;
		}
	}
}
#pragma warning restore 1591
