#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="D:\\STUDY\\PROJECT4\\SHOPONLINEMOI\\APP_DATA\\SHOPONLINE.MDF")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBanner(Banner instance);
  partial void UpdateBanner(Banner instance);
  partial void DeleteBanner(Banner instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertDetailOrder(DetailOrder instance);
  partial void UpdateDetailOrder(DetailOrder instance);
  partial void DeleteDetailOrder(DetailOrder instance);
  partial void InsertManufacture(Manufacture instance);
  partial void UpdateManufacture(Manufacture instance);
  partial void DeleteManufacture(Manufacture instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertPaymnet(Paymnet instance);
  partial void UpdatePaymnet(Paymnet instance);
  partial void DeletePaymnet(Paymnet instance);
  partial void InsertProductGroup(ProductGroup instance);
  partial void UpdateProductGroup(ProductGroup instance);
  partial void DeleteProductGroup(ProductGroup instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertPromotional(Promotional instance);
  partial void UpdatePromotional(Promotional instance);
  partial void DeletePromotional(Promotional instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["D__STUDY_PROJECT4_SHOPONLINEMOI_APP_DATA_SHOPONLINE_MDFConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Banner> Banners
	{
		get
		{
			return this.GetTable<Banner>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<DetailOrder> DetailOrders
	{
		get
		{
			return this.GetTable<DetailOrder>();
		}
	}
	
	public System.Data.Linq.Table<Manufacture> Manufactures
	{
		get
		{
			return this.GetTable<Manufacture>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Paymnet> Paymnets
	{
		get
		{
			return this.GetTable<Paymnet>();
		}
	}
	
	public System.Data.Linq.Table<ProductGroup> ProductGroups
	{
		get
		{
			return this.GetTable<ProductGroup>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<Promotional> Promotionals
	{
		get
		{
			return this.GetTable<Promotional>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
}

[Table(Name="dbo.Banners")]
public partial class Banner : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _BannerID;
	
	private string _BannertName;
	
	private System.DateTime _Date;
	
	private string _Images;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerIDChanging(string value);
    partial void OnBannerIDChanged();
    partial void OnBannertNameChanging(string value);
    partial void OnBannertNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    #endregion
	
	public Banner()
	{
		OnCreated();
	}
	
	[Column(Storage="_BannerID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string BannerID
	{
		get
		{
			return this._BannerID;
		}
		set
		{
			if ((this._BannerID != value))
			{
				this.OnBannerIDChanging(value);
				this.SendPropertyChanging();
				this._BannerID = value;
				this.SendPropertyChanged("BannerID");
				this.OnBannerIDChanged();
			}
		}
	}
	
	[Column(Storage="_BannertName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string BannertName
	{
		get
		{
			return this._BannertName;
		}
		set
		{
			if ((this._BannertName != value))
			{
				this.OnBannertNameChanging(value);
				this.SendPropertyChanging();
				this._BannertName = value;
				this.SendPropertyChanged("BannertName");
				this.OnBannertNameChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Images", DbType="VarChar(300)")]
	public string Images
	{
		get
		{
			return this._Images;
		}
		set
		{
			if ((this._Images != value))
			{
				this.OnImagesChanging(value);
				this.SendPropertyChanging();
				this._Images = value;
				this.SendPropertyChanged("Images");
				this.OnImagesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UserName;
	
	private string _Pass;
	
	private string _RoleID;
	
	private string _Name;
	
	private string _Email;
	
	private System.Nullable<System.DateTime> _Birthday;
	
	private string _Sex;
	
	private string _Address;
	
	private string _Phone;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnRoleIDChanging(string value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public User()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[Column(Storage="_UserName", DbType="NChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_Pass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Pass
	{
		get
		{
			return this._Pass;
		}
		set
		{
			if ((this._Pass != value))
			{
				this.OnPassChanging(value);
				this.SendPropertyChanging();
				this._Pass = value;
				this.SendPropertyChanged("Pass");
				this.OnPassChanged();
			}
		}
	}
	
	[Column(Storage="_RoleID", DbType="NChar(256) NOT NULL", CanBeNull=false)]
	public string RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NChar(10)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Birthday", DbType="DateTime")]
	public System.Nullable<System.DateTime> Birthday
	{
		get
		{
			return this._Birthday;
		}
		set
		{
			if ((this._Birthday != value))
			{
				this.OnBirthdayChanging(value);
				this.SendPropertyChanging();
				this._Birthday = value;
				this.SendPropertyChanged("Birthday");
				this.OnBirthdayChanged();
			}
		}
	}
	
	[Column(Storage="_Sex", DbType="NVarChar(50)")]
	public string Sex
	{
		get
		{
			return this._Sex;
		}
		set
		{
			if ((this._Sex != value))
			{
				this.OnSexChanging(value);
				this.SendPropertyChanging();
				this._Sex = value;
				this.SendPropertyChanged("Sex");
				this.OnSexChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NChar(10)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Association(Name="User_Order", Storage="_Orders", OtherKey="UserName")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[Association(Name="Role_User", Storage="_Role", ThisKey="RoleID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._RoleID = value.RoleID;
				}
				else
				{
					this._RoleID = default(string);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.DetailOrders")]
public partial class DetailOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderID;
	
	private string _ProductID;
	
	private int _Number;
	
	private EntityRef<Order> _Order;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    #endregion
	
	public DetailOrder()
	{
		this._Order = default(EntityRef<Order>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[Column(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="Int NOT NULL")]
	public int Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Association(Name="Order_DetailOrder", Storage="_Order", ThisKey="OrderID", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.DetailOrders.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.DetailOrders.Add(this);
					this._OrderID = value.OrderID;
				}
				else
				{
					this._OrderID = default(int);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	[Association(Name="Product_DetailOrder", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.DetailOrders.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.DetailOrders.Add(this);
					this._ProductID = value.ProductID;
				}
				else
				{
					this._ProductID = default(string);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Manufactures")]
public partial class Manufacture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ManufactureID;
	
	private string _ManufactureName;
	
	private string _Address;
	
	private string _Email;
	
	private string _Logo;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnManufactureNameChanging(string value);
    partial void OnManufactureNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    #endregion
	
	public Manufacture()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[Column(Storage="_ManufactureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ManufactureID
	{
		get
		{
			return this._ManufactureID;
		}
		set
		{
			if ((this._ManufactureID != value))
			{
				this.OnManufactureIDChanging(value);
				this.SendPropertyChanging();
				this._ManufactureID = value;
				this.SendPropertyChanged("ManufactureID");
				this.OnManufactureIDChanged();
			}
		}
	}
	
	[Column(Storage="_ManufactureName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string ManufactureName
	{
		get
		{
			return this._ManufactureName;
		}
		set
		{
			if ((this._ManufactureName != value))
			{
				this.OnManufactureNameChanging(value);
				this.SendPropertyChanging();
				this._ManufactureName = value;
				this.SendPropertyChanged("ManufactureName");
				this.OnManufactureNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Logo", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Logo
	{
		get
		{
			return this._Logo;
		}
		set
		{
			if ((this._Logo != value))
			{
				this.OnLogoChanging(value);
				this.SendPropertyChanging();
				this._Logo = value;
				this.SendPropertyChanged("Logo");
				this.OnLogoChanged();
			}
		}
	}
	
	[Association(Name="Manufacture_Product", Storage="_Products", OtherKey="ManufactureID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Manufacture = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Manufacture = null;
	}
}

[Table(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderID;
	
	private System.Nullable<System.DateTime> _DateSet;
	
	private System.Nullable<System.DateTime> _DateDelivery;
	
	private string _UserName;
	
	private string _PaymentID;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Email;
	
	private string _RecipientName;
	
	private System.Nullable<int> _State;
	
	private EntitySet<DetailOrder> _DetailOrders;
	
	private EntityRef<Paymnet> _Paymnet;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnDateSetChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSetChanged();
    partial void OnDateDeliveryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeliveryChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPaymentIDChanging(string value);
    partial void OnPaymentIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRecipientNameChanging(string value);
    partial void OnRecipientNameChanged();
    partial void OnStateChanging(System.Nullable<int> value);
    partial void OnStateChanged();
    #endregion
	
	public Order()
	{
		this._DetailOrders = new EntitySet<DetailOrder>(new Action<DetailOrder>(this.attach_DetailOrders), new Action<DetailOrder>(this.detach_DetailOrders));
		this._Paymnet = default(EntityRef<Paymnet>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_DateSet", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateSet
	{
		get
		{
			return this._DateSet;
		}
		set
		{
			if ((this._DateSet != value))
			{
				this.OnDateSetChanging(value);
				this.SendPropertyChanging();
				this._DateSet = value;
				this.SendPropertyChanged("DateSet");
				this.OnDateSetChanged();
			}
		}
	}
	
	[Column(Storage="_DateDelivery", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateDelivery
	{
		get
		{
			return this._DateDelivery;
		}
		set
		{
			if ((this._DateDelivery != value))
			{
				this.OnDateDeliveryChanging(value);
				this.SendPropertyChanging();
				this._DateDelivery = value;
				this.SendPropertyChanged("DateDelivery");
				this.OnDateDeliveryChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_PaymentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string PaymentID
	{
		get
		{
			return this._PaymentID;
		}
		set
		{
			if ((this._PaymentID != value))
			{
				if (this._Paymnet.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPaymentIDChanging(value);
				this.SendPropertyChanging();
				this._PaymentID = value;
				this.SendPropertyChanged("PaymentID");
				this.OnPaymentIDChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(100)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(300)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_RecipientName", DbType="NVarChar(100)")]
	public string RecipientName
	{
		get
		{
			return this._RecipientName;
		}
		set
		{
			if ((this._RecipientName != value))
			{
				this.OnRecipientNameChanging(value);
				this.SendPropertyChanging();
				this._RecipientName = value;
				this.SendPropertyChanged("RecipientName");
				this.OnRecipientNameChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Int")]
	public System.Nullable<int> State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Association(Name="Order_DetailOrder", Storage="_DetailOrders", OtherKey="OrderID")]
	public EntitySet<DetailOrder> DetailOrders
	{
		get
		{
			return this._DetailOrders;
		}
		set
		{
			this._DetailOrders.Assign(value);
		}
	}
	
	[Association(Name="Paymnet_Order", Storage="_Paymnet", ThisKey="PaymentID", IsForeignKey=true)]
	public Paymnet Paymnet
	{
		get
		{
			return this._Paymnet.Entity;
		}
		set
		{
			Paymnet previousValue = this._Paymnet.Entity;
			if (((previousValue != value) 
						|| (this._Paymnet.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Paymnet.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Paymnet.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._PaymentID = value.PaymentID;
				}
				else
				{
					this._PaymentID = default(string);
				}
				this.SendPropertyChanged("Paymnet");
			}
		}
	}
	
	[Association(Name="User_Order", Storage="_User", ThisKey="UserName", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._UserName = value.UserName;
				}
				else
				{
					this._UserName = default(string);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DetailOrders(DetailOrder entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_DetailOrders(DetailOrder entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[Table(Name="dbo.Paymnets")]
public partial class Paymnet : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PaymentID;
	
	private string _PaymentName;
	
	private EntitySet<Order> _Orders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(string value);
    partial void OnPaymentIDChanged();
    partial void OnPaymentNameChanging(string value);
    partial void OnPaymentNameChanged();
    #endregion
	
	public Paymnet()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		OnCreated();
	}
	
	[Column(Storage="_PaymentID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PaymentID
	{
		get
		{
			return this._PaymentID;
		}
		set
		{
			if ((this._PaymentID != value))
			{
				this.OnPaymentIDChanging(value);
				this.SendPropertyChanging();
				this._PaymentID = value;
				this.SendPropertyChanged("PaymentID");
				this.OnPaymentIDChanged();
			}
		}
	}
	
	[Column(Storage="_PaymentName", DbType="NVarChar(50)")]
	public string PaymentName
	{
		get
		{
			return this._PaymentName;
		}
		set
		{
			if ((this._PaymentName != value))
			{
				this.OnPaymentNameChanging(value);
				this.SendPropertyChanging();
				this._PaymentName = value;
				this.SendPropertyChanged("PaymentName");
				this.OnPaymentNameChanged();
			}
		}
	}
	
	[Association(Name="Paymnet_Order", Storage="_Orders", OtherKey="PaymentID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Paymnet = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Paymnet = null;
	}
}

[Table(Name="dbo.ProductGroups")]
public partial class ProductGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ProductGroupID;
	
	private string _ProductGroupName;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductGroupIDChanging(int value);
    partial void OnProductGroupIDChanged();
    partial void OnProductGroupNameChanging(string value);
    partial void OnProductGroupNameChanged();
    #endregion
	
	public ProductGroup()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[Column(Storage="_ProductGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ProductGroupID
	{
		get
		{
			return this._ProductGroupID;
		}
		set
		{
			if ((this._ProductGroupID != value))
			{
				this.OnProductGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ProductGroupID = value;
				this.SendPropertyChanged("ProductGroupID");
				this.OnProductGroupIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductGroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ProductGroupName
	{
		get
		{
			return this._ProductGroupName;
		}
		set
		{
			if ((this._ProductGroupName != value))
			{
				this.OnProductGroupNameChanging(value);
				this.SendPropertyChanging();
				this._ProductGroupName = value;
				this.SendPropertyChanged("ProductGroupName");
				this.OnProductGroupNameChanged();
			}
		}
	}
	
	[Association(Name="ProductGroup_Product", Storage="_Products", OtherKey="ProductGroupID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.ProductGroup = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.ProductGroup = null;
	}
}

[Table(Name="dbo.Products")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ProductID;
	
	private string _ProductName;
	
	private string _Images;
	
	private System.Nullable<int> _Price;
	
	private string _Color;
	
	private string _Size;
	
	private System.Nullable<int> _Number;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<int> _Status;
	
	private int _ProductGroupID;
	
	private int _ManufactureID;
	
	private string _Descriptions;
	
	private EntitySet<DetailOrder> _DetailOrders;
	
	private EntitySet<Promotional> _Promotionals;
	
	private EntityRef<Manufacture> _Manufacture;
	
	private EntityRef<ProductGroup> _ProductGroup;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnProductGroupIDChanging(int value);
    partial void OnProductGroupIDChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnDescriptionsChanging(string value);
    partial void OnDescriptionsChanged();
    #endregion
	
	public Product()
	{
		this._DetailOrders = new EntitySet<DetailOrder>(new Action<DetailOrder>(this.attach_DetailOrders), new Action<DetailOrder>(this.detach_DetailOrders));
		this._Promotionals = new EntitySet<Promotional>(new Action<Promotional>(this.attach_Promotionals), new Action<Promotional>(this.detach_Promotionals));
		this._Manufacture = default(EntityRef<Manufacture>);
		this._ProductGroup = default(EntityRef<ProductGroup>);
		OnCreated();
	}
	
	[Column(Storage="_ProductID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ProductName
	{
		get
		{
			return this._ProductName;
		}
		set
		{
			if ((this._ProductName != value))
			{
				this.OnProductNameChanging(value);
				this.SendPropertyChanging();
				this._ProductName = value;
				this.SendPropertyChanged("ProductName");
				this.OnProductNameChanged();
			}
		}
	}
	
	[Column(Storage="_Images", DbType="VarChar(300)")]
	public string Images
	{
		get
		{
			return this._Images;
		}
		set
		{
			if ((this._Images != value))
			{
				this.OnImagesChanging(value);
				this.SendPropertyChanging();
				this._Images = value;
				this.SendPropertyChanged("Images");
				this.OnImagesChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Int")]
	public System.Nullable<int> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Color", DbType="NVarChar(50)")]
	public string Color
	{
		get
		{
			return this._Color;
		}
		set
		{
			if ((this._Color != value))
			{
				this.OnColorChanging(value);
				this.SendPropertyChanging();
				this._Color = value;
				this.SendPropertyChanged("Color");
				this.OnColorChanged();
			}
		}
	}
	
	[Column(Storage="_Size", DbType="NChar(20)")]
	public string Size
	{
		get
		{
			return this._Size;
		}
		set
		{
			if ((this._Size != value))
			{
				this.OnSizeChanging(value);
				this.SendPropertyChanging();
				this._Size = value;
				this.SendPropertyChanged("Size");
				this.OnSizeChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="Int")]
	public System.Nullable<int> Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ProductGroupID", DbType="Int NOT NULL")]
	public int ProductGroupID
	{
		get
		{
			return this._ProductGroupID;
		}
		set
		{
			if ((this._ProductGroupID != value))
			{
				if (this._ProductGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ProductGroupID = value;
				this.SendPropertyChanged("ProductGroupID");
				this.OnProductGroupIDChanged();
			}
		}
	}
	
	[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
	public int ManufactureID
	{
		get
		{
			return this._ManufactureID;
		}
		set
		{
			if ((this._ManufactureID != value))
			{
				if (this._Manufacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnManufactureIDChanging(value);
				this.SendPropertyChanging();
				this._ManufactureID = value;
				this.SendPropertyChanged("ManufactureID");
				this.OnManufactureIDChanged();
			}
		}
	}
	
	[Column(Storage="_Descriptions", DbType="NVarChar(300)")]
	public string Descriptions
	{
		get
		{
			return this._Descriptions;
		}
		set
		{
			if ((this._Descriptions != value))
			{
				this.OnDescriptionsChanging(value);
				this.SendPropertyChanging();
				this._Descriptions = value;
				this.SendPropertyChanged("Descriptions");
				this.OnDescriptionsChanged();
			}
		}
	}
	
	[Association(Name="Product_DetailOrder", Storage="_DetailOrders", OtherKey="ProductID")]
	public EntitySet<DetailOrder> DetailOrders
	{
		get
		{
			return this._DetailOrders;
		}
		set
		{
			this._DetailOrders.Assign(value);
		}
	}
	
	[Association(Name="Product_Promotional", Storage="_Promotionals", OtherKey="ProductID")]
	public EntitySet<Promotional> Promotionals
	{
		get
		{
			return this._Promotionals;
		}
		set
		{
			this._Promotionals.Assign(value);
		}
	}
	
	[Association(Name="Manufacture_Product", Storage="_Manufacture", ThisKey="ManufactureID", IsForeignKey=true)]
	public Manufacture Manufacture
	{
		get
		{
			return this._Manufacture.Entity;
		}
		set
		{
			Manufacture previousValue = this._Manufacture.Entity;
			if (((previousValue != value) 
						|| (this._Manufacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Manufacture.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._Manufacture.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._ManufactureID = value.ManufactureID;
				}
				else
				{
					this._ManufactureID = default(int);
				}
				this.SendPropertyChanged("Manufacture");
			}
		}
	}
	
	[Association(Name="ProductGroup_Product", Storage="_ProductGroup", ThisKey="ProductGroupID", IsForeignKey=true)]
	public ProductGroup ProductGroup
	{
		get
		{
			return this._ProductGroup.Entity;
		}
		set
		{
			ProductGroup previousValue = this._ProductGroup.Entity;
			if (((previousValue != value) 
						|| (this._ProductGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProductGroup.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._ProductGroup.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._ProductGroupID = value.ProductGroupID;
				}
				else
				{
					this._ProductGroupID = default(int);
				}
				this.SendPropertyChanged("ProductGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DetailOrders(DetailOrder entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_DetailOrders(DetailOrder entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_Promotionals(Promotional entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_Promotionals(Promotional entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[Table(Name="dbo.Promotionals")]
public partial class Promotional : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PromotionalID;
	
	private string _ProductID;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _EndDate;
	
	private int _Discount;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPromotionalIDChanging(int value);
    partial void OnPromotionalIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDiscountChanging(int value);
    partial void OnDiscountChanged();
    #endregion
	
	public Promotional()
	{
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[Column(Storage="_PromotionalID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int PromotionalID
	{
		get
		{
			return this._PromotionalID;
		}
		set
		{
			if ((this._PromotionalID != value))
			{
				this.OnPromotionalIDChanging(value);
				this.SendPropertyChanging();
				this._PromotionalID = value;
				this.SendPropertyChanged("PromotionalID");
				this.OnPromotionalIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
	public System.DateTime EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[Column(Storage="_Discount", DbType="Int NOT NULL")]
	public int Discount
	{
		get
		{
			return this._Discount;
		}
		set
		{
			if ((this._Discount != value))
			{
				this.OnDiscountChanging(value);
				this.SendPropertyChanging();
				this._Discount = value;
				this.SendPropertyChanged("Discount");
				this.OnDiscountChanged();
			}
		}
	}
	
	[Association(Name="Product_Promotional", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.Promotionals.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.Promotionals.Add(this);
					this._ProductID = value.ProductID;
				}
				else
				{
					this._ProductID = default(string);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _RoleID;
	
	private string _RoleName;
	
	private string _Descriptions;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(string value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnDescriptionsChanging(string value);
    partial void OnDescriptionsChanged();
    #endregion
	
	public Role()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[Column(Storage="_RoleID", DbType="NChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[Column(Storage="_Descriptions", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string Descriptions
	{
		get
		{
			return this._Descriptions;
		}
		set
		{
			if ((this._Descriptions != value))
			{
				this.OnDescriptionsChanging(value);
				this.SendPropertyChanging();
				this._Descriptions = value;
				this.SendPropertyChanged("Descriptions");
				this.OnDescriptionsChanged();
			}
		}
	}
	
	[Association(Name="Role_User", Storage="_Users", OtherKey="RoleID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}
#pragma warning restore 1591
