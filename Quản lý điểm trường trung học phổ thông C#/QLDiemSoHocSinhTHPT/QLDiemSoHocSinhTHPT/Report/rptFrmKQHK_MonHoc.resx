<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="rptKQHK_MonHoc1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAABMLAAATCwAAAAAAAAAA
        AAAAAAAAhYWFLrGxsVmqqqoDAAAAAAAAAAAAAAAAAAAAB05OTn4/Pz8QAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAGxsbHGxsbGh9ra2hwAAAAAAAAAAVJSUnO2trawnJycrkpKSikAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAioqKMMzMzP2xq6iNq2I2Ri0tMT6lpaW3urq6o5ycnLWqqqq1V1dXRgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnpqXEo45+/aF0W4apgW3Qx8DApJiYmLPT09Oa09PTmbS0
        tLVhYWFmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABLuWfvq6cUb9spWF0sSdhc29qp+zrKyuqsDA
        wKPV1dWYv7+/rIWFhZE/Pz8MAAAAAAAAAAAAAAAAAAAAAAAAAABfPiuGxp6G/8p5Sey4no7D1bGcybiu
        qcS9vb2koaGhstbW1pnHx8ell5eXpzo6OhoAAAAAAAAAAAAAAAAHBwckpKWkuraHa9vRmXn/z4dd2tTO
        yq/Lr5zQ4ayQvdXU1Juampq1zs7Ons7Ozp7ExMShAAAAAAAAAAAAAAAJgYGBq7S0tKSYl5Wz2Jp39OiU
        ZP+kjHvAxbqxrMelkM3nqYfE4ODkmLu7u6rh4eGd3NzcdwAAAAAAAAACXV1dfpKSkrOnp6emn5+frq+i
        m67lqIf87sKn/dbLxajAv8Cwyqycwt6nh8zo4Nuf3d3dagAAAAEAAAAAODg4RImJibaKioqtm5ubqaOj
        o6yysrSu29bUxPPSvP/sgkL1xMTDr+nr65zUx7+p18m/bQAAAAAAAAAASEhIB3FxcbSDg4Otnp6eqbq6
        uqi2traxyMjIrdbW16jWimHi8KJ2/+uVYdPp6ema2traYwAAAAAAAAAAAAAAAH9/fxyampqlk5OTr7Oz
        s6nExMSryMjIrdLS0qrT09OqyczKq9aLYPH3kFP/1auXdAAAAAAAAAAAAAAAAAAAAAAAAAAAZmZmBa+v
        r2Pc3Nyb+/v7mNDQ0KrJycmt0NDQqru7u6/j3tuez4ph8vJ4MvEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAhYWFFdjY2Hj4+Pic7e3tncrKyqrf39+g2dncWYc3ByDNflLxw1QXbAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAurq6JeDg4Ifr6+udwcHBVwAAAAAAAAAAg0EQH8FhKfMAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/f38Cv7+/EAAAAAAAAAAAAAAAAAAAAABxOAAJAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>